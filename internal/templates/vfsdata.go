// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// FileSystem contains project templates.
var FileSystem = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 11, 21, 2, 49, 51, 590068489, time.UTC),
		},
		"/control.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "control.tmpl",
			modTime:          time.Date(2019, 11, 21, 2, 59, 6, 53344822, time.UTC),
			uncompressedSize: 1322,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x41\x6e\xd4\x4a\x10\xdd\xfb\x14\xfd\xfd\xf5\xa3\x8f\xc4\xd8\x99\x1d\x22\x76\xa3\x28\x12\x2b\x84\x46\x19\xc4\xbe\xd2\x2e\xdb\x4d\xda\xdd\xad\xee\xb2\x27\x83\x65\x29\x9c\x60\x16\xb0\xe7\x04\xc0\x9a\xeb\xcc\x09\x38\x02\xea\xb1\x2d\x45\x24\x83\x02\xab\x72\x95\xdf\xab\xaa\x57\xd5\x95\xfd\x53\x18\x41\x5b\x8b\xac\xa6\x46\xf1\x28\x0b\x86\x29\xd0\x55\x8e\x9a\x47\x59\x83\x04\x4c\xd4\xe0\x3c\x52\xde\x52\xb9\x78\x36\x07\x35\x34\x98\x77\x12\x37\xd6\x38\x62\xc2\x68\x42\x4d\x79\xbc\x91\x05\xd5\x79\x81\x9d\x14\xb8\x38\x38\x4f\xa5\x96\x24\x41\x2d\xbc\x00\x85\xf9\x32\xe6\x51\x46\x92\x14\xf2\xf3\xb6\x00\x21\x4d\xeb\xd9\x85\xd1\xe4\x8c\x62\x2b\xd0\xa8\xd8\xfe\xf6\x23\x5b\x5b\xe3\xae\xb3\x74\x04\x46\x99\x92\xfa\x9a\x39\x54\xb9\xa7\xad\x42\x5f\x23\x12\xab\x1d\x96\x79\xdc\xf7\xe0\x3d\xd2\x0a\xa8\x66\x71\xaa\x8d\x6b\x40\xc9\xf7\x98\x34\x52\x27\xc2\xfb\x78\x18\xe2\x3f\xe0\xfb\x6b\x54\x48\x46\xff\x25\x5d\x8c\x3a\x1e\xc5\xac\x89\xac\x7f\x9e\xa6\xa5\xd1\xe4\x93\xca\x98\x4a\x21\x58\xe9\x13\x61\x9a\x54\x78\xff\xa2\x84\x46\xaa\x6d\x7e\x09\x0a\x37\xb0\x3d\x81\xc6\x9e\x15\xd2\x5b\x05\xdb\xdc\x6f\xc0\x86\xec\x0d\x48\xcd\x84\x02\xef\xf3\x50\x1a\xa4\x46\x17\x96\xb8\x3c\x36\xdb\x2c\xad\x97\x3c\xca\x0a\xd9\xdd\xa1\x39\xa3\x3c\x8f\x32\x18\x1b\x9b\x45\xf8\xd4\x3a\xec\xd8\x61\x03\xf9\xca\x61\x17\xb2\xf1\xfd\xee\x6b\x96\xc2\x43\x68\x4f\xc6\x4e\xe8\x35\x19\xcb\xf7\xbb\xef\x47\x90\x41\x82\x85\xd6\xe3\x9c\x5c\xc1\x36\x5d\x85\x00\xdf\xef\xbe\x1d\x21\x69\xbc\xa1\x09\xff\x1a\x6f\x88\xef\x77\x5f\x0e\xc8\x13\x7d\xe5\xed\xd9\x03\x04\x87\x16\x61\xa6\x5c\x8e\x4e\x01\x04\x0b\x32\x55\xa5\x90\xf5\xfd\x82\xc9\x92\x25\xe3\xaf\x61\x98\x06\x12\x83\x20\xd9\x61\xdc\xf7\xa8\x8b\x61\xe0\x3f\x3e\x7f\xfa\x70\x4c\x71\xdd\x96\xa5\x9a\x55\xac\x27\xef\xa1\x1a\xd3\xbf\xdf\x15\xb9\x1d\x8b\x5c\x85\xfd\x49\x6d\x5b\x62\xe1\x2c\x73\x07\xba\x42\xd6\x48\x9d\x9f\xb2\x06\x6e\xf2\xe5\xe9\x29\xeb\x40\xb5\x18\x9e\x5e\xf2\xd6\xa8\xb6\xc1\x61\x88\xa7\x1e\xee\xc6\xfe\x8b\xa7\x62\xdd\x21\xc0\xa3\x2c\x2d\x64\xc7\xa3\xcc\x4e\x71\x6f\x74\xc5\xfb\x3e\xf4\xf7\x26\xb0\x87\xa1\xef\xe7\x2f\xf6\x7f\xdf\xbf\x0c\xb7\x44\xaf\x50\x57\x54\xb3\x64\xb4\xc3\xf0\x64\xea\x39\x4b\xed\x9d\x5c\xe8\x9c\x71\x7c\x8c\xcd\x73\x0a\x6b\x56\xd2\x13\x3f\x3f\x88\x65\xab\xc9\x0f\x42\x0f\x37\x7e\x0f\xf9\xaf\x68\x9d\x43\x4d\xfc\x62\xb4\x6c\x6d\x74\x35\xce\x25\x0d\x4f\x9d\x47\x99\x17\x4e\x5a\x62\x05\x96\xe8\x98\x77\xe2\xd7\x0b\x2c\x91\x44\xbd\xa8\x51\x59\x74\x3e\x79\x37\x9e\x61\x96\x8e\xb4\x47\xf0\xe7\xe5\xde\xa3\xfe\x0c\x00\x00\xff\xff\x3c\x57\xf6\xa8\x2a\x05\x00\x00"),
		},
		"/error.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "error.tmpl",
			modTime:          time.Date(2019, 11, 21, 2, 46, 7, 984743860, time.UTC),
			uncompressedSize: 659,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x4d\x8e\xd4\x30\x10\x85\xf7\x39\x85\xc9\x82\x15\x9d\xa8\x77\x68\xb0\xc3\x82\x35\x08\x31\x73\x81\x92\x53\x1d\x97\xda\x7f\x72\xd5\x4c\x08\x56\x24\xee\xc0\x0d\x39\x09\x72\x46\xb3\x60\x81\x44\xcf\xca\xf6\xf3\xfb\xaa\x4a\xf5\xf4\x9b\x39\x59\xd9\x32\x2a\x27\xc1\x4f\x9d\x6e\x87\xf2\x10\x17\x83\x71\xea\x74\x40\x01\x65\x1d\x14\x46\x31\x8f\x72\x39\xbd\x7f\x11\x23\x04\x34\x4f\x84\x6b\x4e\x45\x94\x4d\x51\x30\x8a\xe9\x57\x9a\xc5\x99\x19\x9f\xc8\xe2\xe9\x78\xbc\xa3\x48\x42\xe0\x4f\x6c\xc1\xa3\x39\xf7\x53\xa7\x85\xc4\xe3\x54\xeb\x70\x2f\x20\x8f\xfc\x29\xcd\xb8\xef\xaa\x56\x27\x92\x9f\xa5\x07\xfc\x2e\xea\xef\xef\xdf\x3f\x7f\xa9\xfb\x9c\xca\x55\x8f\xcf\x7c\xa7\x3d\xc5\xab\x2a\xe8\x0d\xcb\xe6\x91\x1d\xa2\x28\x57\xf0\x62\xfa\x5a\x81\x19\xe5\x2b\x88\x53\xfd\x18\x53\x09\xe0\xe9\x07\x0e\x81\xe2\x60\x99\xfb\x7d\xef\x6f\xe0\xf9\x8a\x1e\x25\xc5\x57\xe2\x58\x4a\x2a\xff\xc5\xb5\x05\xf0\xdd\x38\x5e\x52\x14\x1e\x96\x94\x16\x8f\x90\x89\x07\x9b\xc2\x68\x99\x3f\x5e\x20\x90\xdf\xcc\x37\xf0\xb8\xc2\xf6\x16\x42\xfe\x30\x13\x67\x0f\x9b\xe1\x15\x72\xab\x1e\x80\xa2\xb2\x1e\x98\x4d\x8b\x05\x28\x62\x69\xc9\x9e\x6f\x5c\xb8\x1e\xdd\x79\xea\x74\x9e\x6a\x5d\x49\x9c\x1a\x1e\xb6\xdc\x64\x9b\xe6\x23\xbb\xe6\x38\xee\x77\xaa\x56\x8c\xf3\xbe\xbf\x18\xbf\x40\x68\xe5\xff\xe9\x54\xa7\xa3\xf9\xf0\x19\x99\x61\x39\x5a\xe5\xa9\xd3\x63\x9b\x7c\xfa\x13\x00\x00\xff\xff\xd1\xa1\x9b\xa4\x93\x02\x00\x00"),
		},
		"/errorNoAudacious.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "errorNoAudacious.tmpl",
			modTime:          time.Date(2019, 11, 21, 2, 44, 17, 823081802, time.UTC),
			uncompressedSize: 610,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x41\xaa\x14\x41\x0c\x86\xf7\x7d\x8a\xd8\x0b\x57\x4e\xb7\x23\x08\xa2\x55\x25\xba\x71\x25\x0c\xea\x05\x42\x75\xa6\x2b\x4c\x75\xaa\xa8\xa4\xdf\xd0\x3e\x1e\x78\x07\x6f\xe8\x49\xa4\x1d\x44\x70\xa5\x6f\xf5\x93\x90\xff\xe7\xe7\x8b\x7b\x32\x95\x68\x5b\x25\x48\xb6\xe4\xd0\xb9\x5d\x20\xa3\xcc\x9e\x24\x74\x6e\x21\x43\x88\x09\x9b\x92\xf9\xd5\xce\x87\x57\xbf\x97\x82\x0b\xf9\x3b\xa6\x6b\x2d\xcd\x20\x16\x31\x12\xf3\xfd\x95\x27\x4b\x7e\xa2\x3b\x8e\x74\xf8\x35\x3c\x63\x61\x63\xcc\x07\x8d\x98\xc9\x1f\xfb\xd0\x39\x63\xcb\x14\x5e\x3e\x7f\x01\xef\x71\x82\x0f\x68\x74\xc5\x0d\x7e\x7c\xfb\x0e\x9f\x6b\x69\x17\x37\xde\x0e\x3a\x97\x59\x2e\xd0\x28\x7b\xb5\x2d\x93\x26\x22\x83\xd4\xe8\xec\xfb\xfb\x7b\x54\x25\x3b\xa1\x25\xe8\x47\x29\x6d\xc1\xcc\x5f\x69\x58\x58\x86\xa8\xda\x3f\x3c\xf4\xff\xe1\xd7\x0b\x65\xb2\x22\x8f\xb4\x53\x6b\xa5\xfd\x93\x2f\x99\x55\x7d\x3d\x8e\xe7\x22\xa6\xc3\x5c\xca\x9c\x09\x2b\xeb\x10\xcb\x32\x46\xd5\xb7\x67\x5c\x38\x6f\xfe\x13\xe6\x9d\xc9\x53\x5c\xea\x9b\x89\xb5\x66\xdc\xbc\x5e\xb1\xee\xe9\x0b\xb2\x40\xcc\xa8\xea\x77\xee\xc8\x42\x6d\x7f\xdd\xf1\x6f\xa2\x6e\x4c\xc7\xd0\xb9\x1a\xbe\x24\x82\x77\xeb\x84\x91\xcb\xaa\xf0\x91\x26\x46\x38\x65\xdc\xa8\x01\x2b\x48\x31\x88\x6b\x6b\x24\x96\x37\x68\xab\x08\xcb\x3c\xc0\x29\x13\x2a\x81\xc3\x5b\xf5\x31\xe3\x2a\x31\x85\x9b\xfc\x89\x73\x23\x06\x40\x99\xc0\xda\x06\x38\x23\xcb\xe0\xc6\x1a\x3a\x37\xee\x3d\xc3\xcf\x00\x00\x00\xff\xff\x0c\xbe\xef\x95\x62\x02\x00\x00"),
		},
		"/playlist.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "playlist.tmpl",
			modTime:          time.Date(2019, 11, 21, 2, 50, 42, 273366907, time.UTC),
			uncompressedSize: 763,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x6a\xdc\x30\x10\x86\xef\x7a\x8a\xa9\xd9\x43\x0b\x5d\x8b\xdc\xca\x22\x0b\x72\x68\x4f\xa5\x14\xda\x4b\x8f\xaa\x3d\x1b\x29\x91\x6d\x75\x34\x6e\x6b\x06\x41\xdf\xa1\x6f\xd8\x27\x29\x5a\x6f\x36\x10\x42\xc8\xc9\x8c\xf5\xcf\xa7\xf9\x35\xbf\x79\x35\xcc\x3d\xaf\x09\xc1\xf3\x18\xad\x32\x23\xb2\x83\xde\x3b\xca\xc8\xdd\xc2\xc7\xfd\x3b\xab\x0c\x07\x8e\x68\x45\xda\x4f\x6e\xc4\x52\xe0\xdf\x9f\xbf\xf0\x25\xcd\x74\x67\xf4\x76\xa4\x4c\x0c\xd3\x1d\x10\xc6\x2e\xf3\x1a\x31\x7b\x44\x06\x4f\x78\xec\x1a\x11\x97\x33\xf2\x67\xc7\x1e\x1a\x9d\xa2\x5b\x63\xc8\xdc\xf6\x39\x37\xa5\x34\x56\x19\x7f\xf5\x80\x36\xda\x5f\x59\x65\x12\xf4\xd1\xe5\xdc\x21\xd1\x4c\xd6\xe8\x64\x95\x99\xe3\xf9\xe7\x3d\xc2\x2a\x91\x3d\x90\x9b\x6e\x10\x76\x61\xf8\xfd\x16\x76\x38\x31\xad\x70\xe8\xa0\x7d\x3f\x31\x05\xcc\xa5\xd4\xd1\x44\xc2\x11\xf0\xc7\x49\x05\xbb\xf6\xba\xe7\xf0\xb3\xfa\xd8\x78\xee\x54\x42\x18\xba\xa6\x5f\x88\x70\xe2\x46\x04\xa7\xa1\x14\xab\xcc\x80\xec\x42\xcc\x56\x99\xbc\x8c\xa3\xa3\xd5\x1a\x77\x36\xa6\x6f\x97\x31\x69\x91\x4a\xad\x4e\x44\xda\xaf\xf5\x35\xaa\x0b\x67\xe1\xb5\xc8\x87\x99\x46\xc7\x1f\x71\xba\x61\x0f\xed\xf6\x2d\xe5\x8d\xd1\xf7\x2c\x25\xf2\x2b\xd4\xb3\xea\x1e\xf6\xa5\x00\x98\x64\x4f\x94\x03\x80\x48\x5b\x59\xc9\x9e\xc7\xb9\xa8\xaf\x89\x43\xe6\xaa\x37\xc9\x6e\xc5\xe1\x19\x75\xfc\xbe\x8c\x27\x78\x55\xd7\xe2\x39\xf6\x37\x74\x74\x99\xa4\x16\x07\x78\x42\x6d\x92\xdd\xec\xd4\x7b\x9f\xb6\xb9\x6d\x4d\x3f\x3c\xa0\x8e\x61\x5b\xd9\x19\xa1\xe7\x1a\xb8\xdc\x53\x48\x0c\x03\x1e\x91\x20\x53\xff\x38\x30\x47\xe4\xde\xef\x3d\xc6\x84\x94\xdb\xdb\x2d\x34\x46\x6f\x6d\x2f\xe8\xbf\x04\xee\x71\xeb\xff\x00\x00\x00\xff\xff\x30\xf6\x89\xfa\xfb\x02\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/control.tmpl"].(os.FileInfo),
		fs["/error.tmpl"].(os.FileInfo),
		fs["/errorNoAudacious.tmpl"].(os.FileInfo),
		fs["/playlist.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
