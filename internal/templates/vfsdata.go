// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// FileSystem contains project templates.
var FileSystem = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 11, 21, 2, 15, 36, 402810125, time.UTC),
		},
		"/control.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "control.tmpl",
			modTime:          time.Date(2019, 11, 21, 2, 19, 21, 987108213, time.UTC),
			uncompressedSize: 1014,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xcd\x8e\xd3\x30\x10\xbe\xe7\x29\x86\x20\x10\x1c\xda\xec\xde\x90\x70\x2c\xad\x56\xe2\x84\x50\x45\x11\x77\x6f\x32\xf9\x61\x1d\xdb\xb2\x27\x51\x2b\xcb\xd2\xf2\x04\x3d\xc0\x9d\x27\x00\xce\xbc\x4e\x9f\x80\x47\x40\x89\x13\xa9\x62\x5b\xc4\x29\xf1\x37\xdf\x37\xdf\xcc\xd8\xc3\x9e\x94\xba\xa0\xbd\x41\x68\xa8\x93\x3c\x61\x1d\x92\x80\xa2\x11\xd6\x21\xe5\x3d\x55\xab\x57\x3c\x61\xd4\x92\x44\x7e\xd3\x97\xa2\x68\x75\xef\xe0\x56\x2b\xb2\x5a\xc2\x46\x28\x94\x70\x7c\xf8\x02\x5b\xa3\xed\x3d\xcb\x22\x31\x61\xb2\x55\xf7\x60\x51\xe6\x8e\xf6\x12\x5d\x83\x48\xd0\x58\xac\xf2\xd4\x7b\xe1\x1c\xd2\x46\x50\x03\x69\x36\x85\xd7\x85\x73\x69\x08\x29\x4f\xd8\x9d\x2e\xf7\x50\x48\xe1\x5c\x6e\x44\x8d\xab\x22\x1a\x39\x9e\xb0\xe6\xfa\x52\x01\x2c\x6b\xae\x79\xc2\xca\x76\x98\xa5\x27\x2a\x11\x6d\xb3\x05\xca\x8c\xc5\x01\xa6\x32\xf3\x8d\xc5\x61\xcc\xc6\x8f\x87\x1f\x2c\x13\xe7\xd8\x8e\xb4\x99\xd9\x5b\xd2\x86\x1f\x0f\xbf\x2e\x30\x8d\x14\x7b\x23\x7a\x87\x4b\x72\x29\xf6\xd9\x66\x04\xf8\xf1\xf0\xf3\x82\x48\xe1\x8e\x66\xfe\x3b\xdc\x11\x3f\x1e\xbe\x4f\xcc\xe7\xea\xce\x99\xd7\x67\x04\x16\x0d\x8a\x45\xf2\x3e\x1e\x4a\x41\x62\x45\xba\xae\x25\x82\xf7\x2b\x68\x2b\x58\xc7\x50\x08\xf3\x40\x52\x51\x50\x3b\x60\xea\x3d\xaa\x32\x04\xfe\xfb\xdb\xd7\xcf\x97\x3a\x6e\xfa\xaa\x92\x4b\x17\xdb\xf9\x74\xce\x63\x8e\xfd\xcb\xe4\x21\x9a\xdc\x59\x9e\xb0\x56\x99\x9e\x60\x7c\x6a\xb9\x15\xaa\x46\xe8\x5a\x95\x5f\x41\x27\x76\xf9\xf5\xd5\x15\x0c\x42\xf6\x38\x3e\x8f\xf5\x47\x2d\xfb\x0e\x43\x48\xe7\x1a\x4e\xb1\x67\xe9\x6c\x36\x4c\x00\x4f\x98\x99\x01\xa7\x55\xcd\xbd\x1f\x0b\xfb\x30\xca\x42\xf0\x7e\xf9\x83\x17\xde\xbf\xd1\xb6\x13\xf4\x16\x55\x4d\x0d\xac\xe3\x37\x84\x97\x73\xb1\x2c\x33\x27\xb9\xd0\x5a\x6d\x79\xc4\xb2\xb2\x1d\x4e\xe6\x34\x5e\xb3\x6c\x1d\xf1\x9b\xa9\x59\xd8\xcc\xe7\xb1\xd1\x69\x11\x1e\x31\x9f\x16\xbd\xb5\xa8\x88\xdf\xc6\x2f\x6c\xb5\xaa\xe3\x5c\x5c\x61\x5b\x43\x50\x62\x85\x16\x9c\x2d\xfe\xde\x8e\x0a\xa9\x68\x56\x0d\x4a\x83\xd6\xad\x3f\xc5\x25\x61\x59\x94\xfd\x87\x7e\xb9\xd4\x47\xd2\x3f\x01\x00\x00\xff\xff\xbe\xd2\x5e\x15\xf6\x03\x00\x00"),
		},
		"/error.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "error.tmpl",
			modTime:          time.Date(2019, 11, 21, 2, 19, 11, 299045089, time.UTC),
			uncompressedSize: 300,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xcd\x41\x4a\xc4\x40\x10\x05\xd0\x7d\x9f\xa2\xcc\x7e\x12\x66\x27\xd2\xe9\x8d\x6b\x45\x98\xb9\x40\x93\xd4\x58\x61\x3a\x93\x26\xf5\x07\x0d\x45\x83\x77\xf0\x86\x9e\x44\x9c\x5e\x88\x4b\x97\xf5\x1f\xf5\xbf\xbf\x1b\x97\x01\x5b\x66\x12\xcc\x29\x38\x3f\x33\x22\x0d\x12\x57\x65\xf4\x57\x9c\x76\xf7\xc1\x79\x4c\x48\x1c\xcc\xda\x03\x22\xae\xfa\xb8\x8c\x5c\x0a\x99\x09\x90\x6b\x74\xe4\x77\xd0\x5f\xfe\xfa\xf8\xa4\x43\x5e\xd6\xb3\xef\xea\xbf\xf3\x69\xba\x9c\x69\xe5\xd4\x2b\xb6\xc4\x2a\xcc\x20\x59\xf9\xd4\x37\x66\x51\x95\xf1\x12\x21\xd4\x74\x37\x6e\x07\xd5\xa6\x94\x26\x38\x2f\xfb\x7f\x8e\xfb\x4e\xf6\xc1\xf9\x1c\xcc\xde\x26\x08\xb5\xc7\x2d\x73\x29\x66\x6d\x29\x0f\x64\xc6\x97\xf1\xe7\xaa\xf6\x1c\xe7\xda\xf8\x8b\xb4\xab\xc1\x13\xab\xc6\xd7\x5b\x61\x0e\xdf\x01\x00\x00\xff\xff\x3a\x7e\xff\xe2\x2c\x01\x00\x00"),
		},
		"/errorNoAudacious.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "errorNoAudacious.tmpl",
			modTime:          time.Date(2019, 11, 21, 2, 19, 31, 314163302, time.UTC),
			uncompressedSize: 277,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcd\x41\x4a\x04\x31\x14\x04\xd0\x7d\x9f\xa2\xec\xbd\x13\x47\x10\x5c\xfc\x0e\xe8\xc6\x95\xd0\xa0\x17\xf8\x24\x7f\x26\x61\x32\xe9\x26\xf9\x41\xc2\x30\xe0\x1d\xbc\xa1\x27\x11\xec\x85\xe0\xaa\x16\x55\xbc\xa2\x1b\xbf\x38\xed\xab\x20\xe8\x39\xd9\x81\xce\xa2\x0c\x17\xb8\x54\xd1\xa9\xe9\xe1\xf6\xd1\x0e\xa4\x51\x93\xd8\x87\xbb\x7b\x3c\xb3\xc7\x0b\xab\x7c\x70\xc7\xf7\xe7\x17\xde\xd6\xa5\x9c\xc8\x6c\x83\x81\x52\xcc\x27\x14\x49\x53\xd5\x9e\xa4\x06\x11\x45\x28\x72\x98\xc6\xcb\x85\x6b\x15\x9d\x59\x03\x46\xf3\x5b\xef\x5c\xad\xe3\xf5\x3a\xda\x81\xc2\xfe\xbf\x4e\x26\xec\xed\x40\xab\x7d\x0f\x82\xa7\xe6\xd9\xc5\xa5\x55\xbc\x8a\x8f\x8c\x39\x71\x97\x82\x58\x91\x17\x85\x6b\xa5\x48\xd6\xd4\x51\x5a\xce\x31\x1f\x77\x98\x93\x70\x15\x10\x6f\xef\x26\x71\xcb\x2e\xd8\x2d\xfe\x38\x32\x6c\xc1\xd9\x43\x4b\x07\x1f\x39\xe6\x1d\x99\xd5\xfe\x04\x00\x00\xff\xff\x83\x8e\xd1\x4e\x15\x01\x00\x00"),
		},
		"/playlist.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "playlist.tmpl",
			modTime:          time.Date(2019, 11, 21, 2, 39, 32, 962369816, time.UTC),
			uncompressedSize: 787,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x8a\x14\x31\x10\x86\xef\x79\x8a\xb2\x99\x83\x82\xd3\x61\x6f\x32\xa4\x03\x7b\xd0\x93\x88\xa0\x17\x8f\xd9\xee\x9a\x49\x76\xd3\xdd\xb1\x52\xa3\x36\x45\xc0\x77\xf0\x0d\x7d\x12\xc9\xf4\xcc\x2c\xe8\xb2\x78\x0a\x45\xfd\xff\x97\xfa\x93\x32\x2f\x86\xb9\xe7\x25\x21\x78\x1e\xa3\x55\x66\x44\x76\xd0\x7b\x47\x19\xb9\x3b\xf2\x7e\xfb\xc6\x2a\xc3\x81\x23\x5a\x91\xf6\x83\x1b\xb1\x14\xf8\xfd\xf3\x17\x7c\x4a\x33\x3d\x18\xbd\xb6\x94\x89\x61\x7a\x00\xc2\xd8\x65\x5e\x22\x66\x8f\xc8\xe0\x09\xf7\x5d\x23\xe2\x72\x46\xfe\xe8\xd8\x43\xa3\x4f\xed\xb6\xcf\xb9\x29\xa5\xb1\xca\xdc\xcd\xc3\x02\x7d\x74\x39\x77\xc9\x1d\x70\x9b\xa2\x5b\x62\xc8\x6c\x95\xf1\x37\x8f\x57\x1a\xed\x6f\xac\x32\xe9\x2c\x45\xa2\x99\xac\xd1\xc9\x2a\x33\xc7\x8b\xff\x6a\x15\xd9\x02\xb9\xe9\x80\xb0\x09\xc3\x8f\xd7\xb0\xc1\x89\x69\x81\x5d\x07\xed\xdb\x89\x29\x60\x2e\xa5\x8e\x2c\x12\xf6\x80\x5f\x4f\x2a\xd8\xb4\xb7\x3d\x87\x6f\x35\xdf\xca\x73\xa7\x12\xc2\xd0\x35\xfd\x91\x08\x27\x6e\x44\x70\x1a\x4a\xb1\xca\x0c\xc8\x2e\xc4\x6c\x95\xc9\xc7\x71\x74\xb4\x58\xe3\xce\x81\xf5\xfd\x71\x4c\x5a\xa4\x52\x6b\x48\x91\xf6\x73\x7d\xa5\x9a\xc2\x59\x78\x29\xf2\x6e\xa6\xd1\xf1\x7b\x9c\x0e\xec\xa1\x5d\xcf\x52\x5e\x19\x7d\x61\x29\x91\xef\xa1\xf6\x6a\x7a\xd8\x96\x02\x60\x92\x3d\x51\x76\x00\x22\x6d\x65\x25\x7b\x1e\xe7\xaa\xbe\x25\x0e\x99\xab\xde\x24\xbb\x16\xbb\x67\xd4\xf1\xee\x38\x9e\xe0\x55\x5d\x8b\xe7\xd8\x5f\xd0\xd1\x75\x92\x5a\xec\xe0\x09\xb5\x49\x76\x8d\x53\xef\x7d\x3a\xe6\xfa\x6b\xfa\xf1\x01\x75\x0c\xeb\x97\x9d\x11\x7a\xae\x8b\x98\x7b\x0a\x89\x61\xc0\x3d\x12\x64\xea\xff\x5e\xa4\x3d\x72\xef\xb7\x1e\x63\x42\xca\xed\xfd\xba\x4f\x46\xaf\xb6\xff\xf0\x5f\xb6\xe5\x1f\xeb\x9f\x00\x00\x00\xff\xff\x0e\x79\xa3\x1e\x13\x03\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/control.tmpl"].(os.FileInfo),
		fs["/error.tmpl"].(os.FileInfo),
		fs["/errorNoAudacious.tmpl"].(os.FileInfo),
		fs["/playlist.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
