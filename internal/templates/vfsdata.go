// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// FileSystem contains project templates.
var FileSystem = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 11, 21, 3, 33, 53, 239891812, time.UTC),
		},
		"/control.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "control.tmpl",
			modTime:          time.Date(2019, 11, 21, 3, 22, 4, 657594573, time.UTC),
			uncompressedSize: 1270,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x41\x8e\xd4\x3a\x10\xdd\xe7\x14\xfe\xf9\xfa\xa3\xff\xa5\xdf\xc9\xf4\x0e\x31\xb1\xd1\x68\x24\x56\x08\xb5\xa6\x11\xfb\x1a\xa7\x92\x98\x71\x6c\xcb\xae\xa4\xa7\x89\x22\x0d\x27\xe8\x05\xec\x39\x01\xb0\xe6\x3a\x7d\x02\x8e\x80\xdc\x49\x4b\x23\x31\x8d\x80\x55\xa5\x2a\xef\x55\xd5\xab\x72\x15\x7f\x95\x56\xd2\xd6\x21\x6b\xa8\xd5\x22\x29\xa2\x61\x1a\x4c\xcd\xd1\x88\xa4\x68\x91\x80\xc9\x06\x7c\x40\xe2\x1d\x55\x8b\x27\xc7\xa0\x81\x16\x79\xaf\x70\xe3\xac\x27\x26\xad\x21\x34\xc4\xd3\x8d\x2a\xa9\xe1\x25\xf6\x4a\xe2\xe2\xe0\xfc\xaf\x8c\x22\x05\x7a\x11\x24\x68\xe4\xcb\x54\x24\x05\x29\xd2\x28\x2e\xbb\x12\xa4\xb2\x5d\x60\x57\xd6\x90\xb7\x9a\xad\xc0\xa0\x66\xfb\xfb\xf7\x6c\xed\xac\xbf\x2d\xf2\x09\x98\x14\x5a\x99\x5b\xe6\x51\xf3\x40\x5b\x8d\xa1\x41\x24\xd6\x78\xac\x78\x3a\x0c\x10\x02\xd2\x0a\xa8\x61\x69\x6e\xac\x6f\x41\xab\xb7\x98\xb5\xca\x64\x32\x84\x74\x1c\xd3\xdf\xe0\x87\x5b\xd4\x48\xd6\xfc\x21\x5d\x4e\x3a\x7e\x89\xd9\x10\xb9\xf0\x34\xcf\x2b\x6b\x28\x64\xb5\xb5\xb5\x46\x70\x2a\x64\xd2\xb6\xb9\x0c\xe1\x59\x05\xad\xd2\x5b\x7e\x0d\x1a\x37\xb0\x3d\x83\xd6\x5d\x94\x2a\x38\x0d\x5b\x1e\x36\xe0\x62\xf6\x16\x94\x61\x52\x43\x08\x3c\x96\x06\x65\xd0\xc7\x25\x2e\x4f\xcd\xb6\xc8\x9b\xa5\x48\x8a\x52\xf5\x0f\x68\xde\xea\x20\x92\x02\xa6\xc6\x8e\x22\x42\xee\x3c\xf6\xec\xb0\x01\xbe\xf2\xd8\xc7\x6c\x62\xbf\xfb\x5c\xe4\xf0\x18\x3a\x90\x75\x33\x7a\x4d\xd6\x89\xfd\xee\xeb\x09\x64\x94\xe0\xa0\x0b\x78\x4c\xae\x61\x9b\xaf\x62\x40\xec\x77\x5f\x4e\x90\x0c\xde\xd1\x8c\x7f\x89\x77\x24\xf6\xbb\x4f\x07\xe4\x99\xb9\x09\xee\xe2\x11\x82\x47\x87\x70\xa4\x5c\x4f\x4e\x09\x04\x0b\xb2\x75\xad\x91\x0d\xc3\x82\xa9\x8a\x65\xd3\xaf\x71\x9c\x07\x92\x82\x24\xd5\x63\x3a\x0c\x68\xca\x71\x14\xdf\x3e\x7e\x78\x77\x4a\x71\xd3\x55\x95\x3e\xaa\x58\xcf\xde\x63\x35\xe6\x7f\x3f\x2b\x72\x3f\x15\xb9\x89\xfb\x53\xc6\x75\xc4\xe2\x59\x72\x0f\xa6\x46\xd6\x2a\xc3\xcf\x59\x0b\x77\x7c\x79\x7e\xce\x7a\xd0\x1d\xc6\xa7\x97\xbd\xb6\xba\x6b\x71\x1c\xd3\xb9\x87\x87\xb1\x7f\xd2\xb9\x58\x7f\x08\x88\xa4\xc8\x4b\xd5\x8b\xa4\x70\x73\x3c\x58\x53\x8b\x61\x88\xfd\xbd\x8a\xec\x71\x1c\x86\xe3\x17\xfb\x77\x18\x9e\xc7\x5b\xa2\x17\x68\x6a\x6a\x58\x36\xd9\x71\xfc\x6f\xee\xb9\xc8\xdd\x83\x5c\xe8\xbd\xf5\x62\x8a\x1d\xe7\x14\xd7\xac\x55\x20\x71\x79\x10\xcb\x56\xb3\x1f\x85\x1e\x6e\xfc\x07\xe4\xdf\xb2\xf3\x1e\x0d\x89\xab\xc9\xb2\xb5\x35\xf5\x34\x97\x3c\x3e\x75\x91\x14\x41\x7a\xe5\x88\x95\x58\xa1\x9f\x26\xd4\xda\xb2\xd3\xc8\x82\x97\x27\xae\x31\x64\x6f\xa6\x6b\x2c\xf2\x89\x2d\xbe\x07\x00\x00\xff\xff\x79\xeb\x4e\x9c\xf6\x04\x00\x00"),
		},
		"/error.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "error.tmpl",
			modTime:          time.Date(2019, 11, 21, 2, 46, 7, 984743860, time.UTC),
			uncompressedSize: 659,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x4d\x8e\xd4\x30\x10\x85\xf7\x39\x85\xc9\x82\x15\x9d\xa8\x77\x68\xb0\xc3\x82\x35\x08\x31\x73\x81\x92\x53\x1d\x97\xda\x7f\x72\xd5\x4c\x08\x56\x24\xee\xc0\x0d\x39\x09\x72\x46\xb3\x60\x81\x44\xcf\xca\xf6\xf3\xfb\xaa\x4a\xf5\xf4\x9b\x39\x59\xd9\x32\x2a\x27\xc1\x4f\x9d\x6e\x87\xf2\x10\x17\x83\x71\xea\x74\x40\x01\x65\x1d\x14\x46\x31\x8f\x72\x39\xbd\x7f\x11\x23\x04\x34\x4f\x84\x6b\x4e\x45\x94\x4d\x51\x30\x8a\xe9\x57\x9a\xc5\x99\x19\x9f\xc8\xe2\xe9\x78\xbc\xa3\x48\x42\xe0\x4f\x6c\xc1\xa3\x39\xf7\x53\xa7\x85\xc4\xe3\x54\xeb\x70\x2f\x20\x8f\xfc\x29\xcd\xb8\xef\xaa\x56\x27\x92\x9f\xa5\x07\xfc\x2e\xea\xef\xef\xdf\x3f\x7f\xa9\xfb\x9c\xca\x55\x8f\xcf\x7c\xa7\x3d\xc5\xab\x2a\xe8\x0d\xcb\xe6\x91\x1d\xa2\x28\x57\xf0\x62\xfa\x5a\x81\x19\xe5\x2b\x88\x53\xfd\x18\x53\x09\xe0\xe9\x07\x0e\x81\xe2\x60\x99\xfb\x7d\xef\x6f\xe0\xf9\x8a\x1e\x25\xc5\x57\xe2\x58\x4a\x2a\xff\xc5\xb5\x05\xf0\xdd\x38\x5e\x52\x14\x1e\x96\x94\x16\x8f\x90\x89\x07\x9b\xc2\x68\x99\x3f\x5e\x20\x90\xdf\xcc\x37\xf0\xb8\xc2\xf6\x16\x42\xfe\x30\x13\x67\x0f\x9b\xe1\x15\x72\xab\x1e\x80\xa2\xb2\x1e\x98\x4d\x8b\x05\x28\x62\x69\xc9\x9e\x6f\x5c\xb8\x1e\xdd\x79\xea\x74\x9e\x6a\x5d\x49\x9c\x1a\x1e\xb6\xdc\x64\x9b\xe6\x23\xbb\xe6\x38\xee\x77\xaa\x56\x8c\xf3\xbe\xbf\x18\xbf\x40\x68\xe5\xff\xe9\x54\xa7\xa3\xf9\xf0\x19\x99\x61\x39\x5a\xe5\xa9\xd3\x63\x9b\x7c\xfa\x13\x00\x00\xff\xff\xd1\xa1\x9b\xa4\x93\x02\x00\x00"),
		},
		"/errorNoAudacious.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "errorNoAudacious.tmpl",
			modTime:          time.Date(2019, 11, 21, 2, 44, 17, 823081802, time.UTC),
			uncompressedSize: 610,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x41\xaa\x14\x41\x0c\x86\xf7\x7d\x8a\xd8\x0b\x57\x4e\xb7\x23\x08\xa2\x55\x25\xba\x71\x25\x0c\xea\x05\x42\x75\xa6\x2b\x4c\x75\xaa\xa8\xa4\xdf\xd0\x3e\x1e\x78\x07\x6f\xe8\x49\xa4\x1d\x44\x70\xa5\x6f\xf5\x93\x90\xff\xe7\xe7\x8b\x7b\x32\x95\x68\x5b\x25\x48\xb6\xe4\xd0\xb9\x5d\x20\xa3\xcc\x9e\x24\x74\x6e\x21\x43\x88\x09\x9b\x92\xf9\xd5\xce\x87\x57\xbf\x97\x82\x0b\xf9\x3b\xa6\x6b\x2d\xcd\x20\x16\x31\x12\xf3\xfd\x95\x27\x4b\x7e\xa2\x3b\x8e\x74\xf8\x35\x3c\x63\x61\x63\xcc\x07\x8d\x98\xc9\x1f\xfb\xd0\x39\x63\xcb\x14\x5e\x3e\x7f\x01\xef\x71\x82\x0f\x68\x74\xc5\x0d\x7e\x7c\xfb\x0e\x9f\x6b\x69\x17\x37\xde\x0e\x3a\x97\x59\x2e\xd0\x28\x7b\xb5\x2d\x93\x26\x22\x83\xd4\xe8\xec\xfb\xfb\x7b\x54\x25\x3b\xa1\x25\xe8\x47\x29\x6d\xc1\xcc\x5f\x69\x58\x58\x86\xa8\xda\x3f\x3c\xf4\xff\xe1\xd7\x0b\x65\xb2\x22\x8f\xb4\x53\x6b\xa5\xfd\x93\x2f\x99\x55\x7d\x3d\x8e\xe7\x22\xa6\xc3\x5c\xca\x9c\x09\x2b\xeb\x10\xcb\x32\x46\xd5\xb7\x67\x5c\x38\x6f\xfe\x13\xe6\x9d\xc9\x53\x5c\xea\x9b\x89\xb5\x66\xdc\xbc\x5e\xb1\xee\xe9\x0b\xb2\x40\xcc\xa8\xea\x77\xee\xc8\x42\x6d\x7f\xdd\xf1\x6f\xa2\x6e\x4c\xc7\xd0\xb9\x1a\xbe\x24\x82\x77\xeb\x84\x91\xcb\xaa\xf0\x91\x26\x46\x38\x65\xdc\xa8\x01\x2b\x48\x31\x88\x6b\x6b\x24\x96\x37\x68\xab\x08\xcb\x3c\xc0\x29\x13\x2a\x81\xc3\x5b\xf5\x31\xe3\x2a\x31\x85\x9b\xfc\x89\x73\x23\x06\x40\x99\xc0\xda\x06\x38\x23\xcb\xe0\xc6\x1a\x3a\x37\xee\x3d\xc3\xcf\x00\x00\x00\xff\xff\x0c\xbe\xef\x95\x62\x02\x00\x00"),
		},
		"/playlist.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "playlist.tmpl",
			modTime:          time.Date(2019, 11, 21, 3, 34, 0, 187934377, time.UTC),
			uncompressedSize: 1047,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\xcd\x6e\x14\x3d\x10\xbc\xcf\x53\xf4\x37\x8a\x3e\x81\x94\x1d\x93\x03\x02\x2d\xb6\x51\x0e\x70\x42\x08\x01\x17\x8e\xcd\x4c\xef\x8e\x13\xff\x61\xf7\x66\x19\xac\x91\x78\x07\xde\x90\x27\x41\xde\xd9\x4d\x2e\x21\x02\x4e\x56\xdb\xd5\x65\x57\x55\x5b\xfe\x37\x84\x9e\xa7\x48\x30\xb2\xb3\xba\x91\x75\x01\x8b\x7e\xab\xc8\xeb\x46\x3a\x62\x84\x7e\xc4\x94\x89\xd5\x8e\x37\xab\xe7\xa7\x4d\x8f\x8e\xd4\x8d\xa1\x7d\x0c\x89\xa1\x0f\x9e\xc9\xb3\x6a\xf7\x66\xe0\x51\x0d\x74\x63\x7a\x5a\x1d\x8a\x73\xe3\x0d\x1b\xb4\xab\xdc\xa3\x25\xf5\xa4\x7b\xf6\xb4\xd5\x8d\x64\xc3\x96\x74\x29\xdd\x5b\x74\x34\xcf\xf0\xf3\xfb\x0f\xf8\x10\x43\xba\x96\x62\x39\x6a\xa4\x35\xfe\x1a\x12\x59\x95\x79\xb2\x94\x47\x22\x86\x31\xd1\x46\xb5\xa5\x60\xce\xc4\xef\x90\x47\x68\x85\x0f\xc9\xa1\x35\xdf\xa8\x73\xc6\x77\x7d\xce\xed\x3c\xb7\x7f\xd1\x9f\xaf\xc9\x12\x07\xff\x8f\xed\xd1\xe2\x64\x4d\xe6\x3f\x6a\x1d\x99\x63\x5e\x0b\xb1\x09\x9e\x73\xb7\x0d\x61\x6b\x09\xa3\xc9\x5d\x1f\x9c\xe8\x73\x7e\xb9\x41\x67\xec\xa4\xde\xa3\xa5\x3d\x4e\xff\xa3\x8b\x2f\x06\x93\xeb\x1d\x2a\xef\x31\x56\x76\x87\xc6\x43\x6f\x31\x67\x55\x7d\x47\xe3\x29\xd5\xe8\x2e\xee\xec\x94\x62\xbc\xd0\x8d\x8c\x47\x18\xa5\x14\x92\x96\x22\xea\x46\x06\x7b\xdc\x3c\xbd\x5b\x37\xa5\xac\x20\xa1\xdf\x12\x9c\x99\xe1\xeb\x39\x9c\x91\xe7\x34\xc1\x5a\x41\xf7\xca\x73\x32\x94\xe7\xb9\x8a\x2a\xc5\x6c\x80\xbe\x1c\x50\x70\xd6\x5d\xf6\x6c\x6e\x6a\x76\x0b\x1f\x1e\x4a\x30\x83\x6a\xfb\x5d\x4a\xe4\xb9\x2d\x85\xfc\x30\xcf\xba\x91\x03\x31\x1a\x9b\x75\x23\xf3\xce\x39\x4c\x93\x96\x78\xb4\x44\x5c\xed\x5c\x14\xa5\x54\xd6\x6a\x5f\x29\xdd\xc7\x3a\x01\x55\x05\x6a\x78\x54\xca\xeb\x1a\x30\xbf\x21\xbf\xe5\x11\xba\x65\x9d\xe7\xc7\x52\x9c\xb8\x9a\x52\xf6\xa6\x9e\x55\xf5\xb0\x9a\x67\x00\x19\xf5\x81\x65\x0d\x50\x4a\x57\xb9\xa2\x3e\x3e\xe7\x16\x7d\x99\xd8\x64\xae\x78\x19\xf5\x52\xac\x1f\x40\xdb\xcf\x3b\x77\x20\xaf\xe8\x5a\x3c\xc4\xfd\x89\x30\xdd\xbe\xa4\x16\x6b\xb8\x07\x2d\xa3\x5e\xe4\xd4\x7b\xef\x97\xb9\xa4\x26\xee\x0c\x14\xd6\x2c\x91\x1d\x29\x44\xa8\x1f\x57\xd4\xa9\xa8\xf6\xf6\xc9\x44\x86\x81\x36\x94\xa0\xfe\x6c\xe5\xc2\xb0\xb3\x04\x39\xf5\xbf\x9d\xdc\xab\x65\x70\xa5\x58\xba\xf5\xaf\x00\x00\x00\xff\xff\xd9\x30\xf1\x6d\x17\x04\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/control.tmpl"].(os.FileInfo),
		fs["/error.tmpl"].(os.FileInfo),
		fs["/errorNoAudacious.tmpl"].(os.FileInfo),
		fs["/playlist.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
