// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// FileSystem contains project assets.
var FileSystem = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 8, 9, 5, 30, 23, 924349097, time.UTC),
		},
		"/controls.js": &vfsgen۰CompressedFileInfo{
			name:             "controls.js",
			modTime:          time.Date(2018, 8, 9, 1, 51, 39, 819214310, time.UTC),
			uncompressedSize: 917,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x51\x6b\xdb\x30\x14\x85\x9f\xed\x5f\x71\x07\x1d\xb6\x21\x28\xef\x0d\x1e\x84\xac\xd0\x41\x07\x63\xcd\xde\x2d\xe4\xe3\xda\x54\xb9\x72\xe5\xab\xd0\x11\xfc\xdf\x87\xe4\x2e\xa4\xd0\x8c\x3d\x4a\x5c\x9d\xf3\x9d\x73\x65\x1c\x4f\x42\x3d\x74\x0b\x3f\x51\x4d\xa7\x3c\xdb\x1a\x83\x51\x6e\xa9\x10\xbc\xca\x7a\xb4\x7a\xe0\x62\x95\xcf\x9b\x3c\x5f\x86\xe1\xbd\xf3\x77\x16\x07\xaa\xa9\x75\x26\x1c\xc0\xa2\x5e\x02\xfc\xef\x47\x58\x18\x71\xbe\x2c\x54\x1a\x2a\xaa\xf3\xa3\x0e\x62\xfa\x7d\x0f\xa6\x9a\x3c\xa6\x91\xea\x2f\xd1\x6b\xe8\xa8\x8c\x47\xe5\x9e\xab\x78\xce\xce\xe2\x2a\xba\xef\x1c\x0b\x58\xa8\xa6\xa2\xd8\xe4\xd9\x4c\xb0\x13\xd2\x5c\x54\x75\x16\x8b\x4f\x59\x24\x79\xf2\x78\x09\x88\x66\x7a\xb0\x68\x6f\xa9\x58\x25\xaf\x48\x71\x5d\xb9\xd9\xd2\xfd\x7e\xff\x63\x89\x45\xce\x98\xe0\x7d\x7c\x7c\x73\x4a\x60\x93\x68\x09\xd3\xfc\xfe\xb8\xc7\xab\xcc\xaa\x89\x48\x17\xc5\x24\x88\x9d\x8e\x24\x35\xe1\x2d\xe1\x3f\x41\xd3\x65\xe2\x44\x82\xbc\xce\xc8\x1f\xf0\x41\x89\x7b\x14\x3f\xf0\x53\x59\xcd\xcd\x26\x91\x5c\x5d\x88\x71\x2c\xde\xd9\xa9\xa8\x94\x6e\xdb\xbb\x23\x58\x1e\x86\x49\xc0\xf0\x65\x61\xec\x60\x9e\x23\xc5\xc5\x5a\x3e\x95\x50\xa2\xfd\x13\x84\x06\x9e\x44\xb3\x81\xeb\xe8\x7e\xff\xfd\x61\xcb\xa6\x5f\x30\xc1\x52\x2d\x7b\xf3\x90\xe0\x39\x15\x92\x67\x50\xa3\x47\x74\xf8\x8a\x4e\x07\x2b\x65\xb5\xc9\xb3\x94\xfc\xac\xa9\x7a\x8f\x6e\x45\xa7\xb7\x9f\x37\x57\x4a\x7a\x70\x79\xfe\x26\xab\x8b\x36\xab\x4d\x3e\xaf\xa8\xd3\x76\x4a\x2d\x5d\x8d\x78\x74\x36\x1c\xf0\x61\xc0\x81\xc7\x20\x17\x01\xcf\x18\x32\x88\x45\x6c\x38\xd5\xb9\xdc\x1d\xb5\x0d\x98\x3f\x37\x71\x23\x0b\x75\xb3\xfe\x5b\xdf\x7a\x31\x59\xdf\x9c\xc0\xc6\xb5\xf8\xf5\xf3\xdb\xce\x1d\x46\xc7\x60\x29\xdf\x2b\x54\x73\x73\x19\x30\xcf\xb2\xff\xcd\xf8\x27\x00\x00\xff\xff\x71\x10\x3b\x21\x95\x03\x00\x00"),
		},
		"/playlist.js": &vfsgen۰CompressedFileInfo{
			name:             "playlist.js",
			modTime:          time.Date(2018, 8, 9, 6, 21, 57, 703979433, time.UTC),
			uncompressedSize: 435,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xb1\x6a\xec\x30\x10\x45\x6b\xfb\x2b\xa6\x93\xdc\x68\x3f\xc0\xe8\xc1\x2b\xd2\x84\x90\x14\x2e\x43\x0a\x21\x4d\x8c\x40\xd2\x38\x1a\xd9\x61\x59\xfc\xef\x41\xb6\x37\x31\x81\x74\xd2\x30\xf7\x9c\xe1\x5a\x4a\x5c\xc0\x17\x8c\x0c\x1a\x1c\xd9\x39\x62\x2a\xea\x63\xc6\x7c\x1d\x30\xa0\x2d\x94\xff\x87\x20\x85\x9a\x82\xb9\x06\xcf\x05\x82\x17\x5d\xdf\xb6\x7b\x12\x6b\x2c\xe1\x27\x3c\x2c\x98\xca\x40\x73\xb6\x28\xc5\xe5\xbe\x7c\x99\x27\x67\x0a\xf2\x96\x40\x56\x94\x22\x32\x9b\x11\x41\x43\xe4\x11\xf4\x3f\xb8\xb5\xcd\x8e\xba\x4d\xc4\x2b\x68\x78\x1c\x5e\x9e\xd5\x64\x32\xa3\x8c\x3c\x2a\x67\x8a\xa9\xe9\x63\x8b\x82\xfb\xf3\xd0\xf3\x95\xca\xd8\xe2\x17\xac\xe2\xc6\xbf\x83\xa4\xe0\xba\xea\x6a\x28\x38\xe5\x2b\x43\x88\xfe\xf8\xda\x60\x98\x9f\x3c\x17\x95\x31\xd2\x82\x52\x9c\xc2\xeb\xb7\xba\xb6\x04\x7a\x2f\xeb\x75\x22\x7e\x3b\xd0\x75\xb0\xb3\xeb\xeb\x80\xdb\x39\x67\x4c\x65\x73\x6c\xe3\x1f\x89\x71\xee\x97\x61\xbd\xb7\x83\x39\x53\x06\x0d\x78\x6a\x86\x02\xaa\x6d\x2e\xb1\xeb\xdb\xb5\xff\x0a\x00\x00\xff\xff\x7e\xee\x27\x4a\xb3\x01\x00\x00"),
		},
		"/style.css": &vfsgen۰CompressedFileInfo{
			name:             "style.css",
			modTime:          time.Date(2018, 8, 9, 2, 55, 29, 234967330, time.UTC),
			uncompressedSize: 511,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x41\x6e\xc3\x20\x10\x45\xd7\xe1\x14\x23\x75\x1b\x2c\x3b\x75\xa3\x0a\xab\x27\xa9\xba\x98\xc0\x14\xa3\x10\x40\x78\xd2\xd8\xa9\x72\xf7\x0a\x3b\xc9\xa2\x8a\xb2\x83\xd1\x7b\xf3\xf9\x62\x17\xcd\x04\xbf\x62\x75\xc0\x51\x9e\x9c\xe1\x5e\xc1\xf6\xad\x4e\x63\x27\xca\x2c\x5b\x17\x14\xb4\x75\x1a\x01\x8f\x1c\x3b\xb1\x4a\x68\x8c\x0b\x56\x41\x0d\xcd\x15\xfb\x8e\x81\xe5\xe0\xce\xa4\xa0\x79\x2f\xa3\x95\x77\x81\x64\x4f\xce\xf6\xac\xa0\xa9\xb6\x85\xd2\xd1\xc7\xac\xe0\xa5\x6d\xdb\x4e\x5c\x84\xe8\x9b\x35\xf4\x9b\x35\xf4\xaf\x25\xfe\x9f\xb1\x99\x91\x2a\xa1\x25\x99\x3c\x4e\xde\x0d\x0c\x15\x6a\x76\x3f\x54\xf0\x39\xf2\x74\xc5\x77\xd1\x9b\x47\xbc\x21\x46\xe7\x07\x48\x4b\xbf\xa5\x4b\x7d\x7f\xf1\x4d\x0f\x31\x1f\xd0\x3f\x5a\xe0\x1d\xe0\x1a\x96\xa1\x8e\x81\x73\xf4\x03\x54\xf7\x13\x96\xbd\x4b\xad\x7b\xab\xe7\x30\xd3\xc8\xd2\x90\x8e\x19\xd9\xc5\x50\xb2\x03\x3d\xf7\x6e\x16\x7a\x67\x83\x02\x4d\x81\x29\xcf\x8a\x0b\xe9\xc8\x9f\x3c\x25\xfa\xc8\x18\x2c\x7d\x29\x25\x0f\xf1\x2c\xe7\x8b\xe4\x8c\x7a\x5f\xec\x1d\xea\xbd\xcd\xf1\x18\x8c\xbc\x7e\x81\x2f\xbd\x6d\xa6\xa9\x13\x97\xbf\x00\x00\x00\xff\xff\x2d\x57\x62\x2a\xff\x01\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/controls.js"].(os.FileInfo),
		fs["/playlist.js"].(os.FileInfo),
		fs["/style.css"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
