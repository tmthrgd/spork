// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// FileSystem contains project assets.
var FileSystem = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 8, 9, 6, 47, 45, 539959864, time.UTC),
		},
		"/controls.js": &vfsgen۰CompressedFileInfo{
			name:             "controls.js",
			modTime:          time.Date(2018, 8, 9, 6, 47, 45, 539959864, time.UTC),
			uncompressedSize: 453,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xd1\x6a\xe3\x30\x10\x45\x9f\xa5\xaf\xd0\x42\x16\x4b\x60\x94\x0f\x30\x59\x58\xb2\x81\x2d\xa4\x2f\x6d\xfa\x6e\x21\x5f\x57\xa6\xca\x28\x95\x47\x81\x62\xfc\xef\x25\x29\x09\x29\xb4\xd0\x37\x21\x66\xee\xb9\x67\xba\xe4\xcb\x1e\xc4\xf6\xb5\x20\xbf\x3d\x22\xc2\x73\xca\xba\xb2\x3e\x11\xe7\x14\xc7\xca\x58\xd7\x75\x9b\x23\x88\xb7\xc3\xc8\x20\x64\x5d\xf9\x38\xf8\x97\xaa\x56\x50\xab\x3f\x6a\x92\x62\xe8\x95\xfe\xa5\x61\xd9\xe5\x67\xb0\x1a\x68\x64\x47\x1e\xa9\x57\xff\x77\xf7\xdb\xbf\xe4\x43\xca\x9b\x88\x13\xc8\x98\xd3\x82\xc8\xe0\x92\xa9\x91\x62\x96\x52\xc0\x1e\x32\x4e\x84\x7f\xe8\x5d\x89\xac\x4d\x23\x45\x0f\xf6\xe1\x9a\x69\x43\x46\x5f\xab\x29\xc0\x75\xc8\xe3\x6c\x2c\x07\x90\x3e\x0f\xed\x02\xa8\x56\xe7\xe7\xda\xb1\x0f\xa6\x91\x73\xad\x7a\x17\x47\x98\x46\xca\x6f\x15\x8f\x29\x96\x3d\xbe\x14\x1c\xe8\x50\xf8\x46\xf0\x5a\x83\x07\x8e\x50\x2b\xd5\x2e\xa6\xeb\xdf\xd1\xc5\x82\xf9\x77\xdb\xc8\x4b\xeb\x76\x79\x39\xdf\xf2\x03\xb2\x5c\x4c\x20\x9f\x3a\x3c\x3d\xdc\xad\xd3\xfe\x90\x08\xc4\xfa\x73\x82\x99\xdb\x5b\x41\x29\xc4\x4f\x1d\xdf\x03\x00\x00\xff\xff\xf5\x5b\x29\x38\xc5\x01\x00\x00"),
		},
		"/fetch-helpers.js": &vfsgen۰CompressedFileInfo{
			name:             "fetch-helpers.js",
			modTime:          time.Date(2018, 8, 9, 6, 43, 15, 65744137, time.UTC),
			uncompressedSize: 462,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xc1\x6a\xeb\x30\x10\x45\xd7\xd1\x57\xcc\xe2\x81\x6c\x08\x7a\xfb\x18\x15\x42\x28\x74\x59\x88\x3f\xc0\x46\xbe\xa9\x4d\x15\xc9\x91\xc6\x90\x12\xf4\xef\x45\x72\x09\x2d\x34\x5d\x8e\xb8\x73\xcf\x19\x19\xef\x22\xd3\x88\x7e\x40\x88\xa4\xe9\x26\x36\x7b\x63\x30\xf3\x8e\x24\xe3\xca\xff\x67\xdb\x4f\x4e\x6e\x45\x6a\x84\x58\xc3\x08\xc1\x87\x67\x8b\x33\x69\x1a\xbc\x59\xce\x70\xac\x2e\x0b\xc2\xc7\x11\x16\x86\x7d\xa8\xa4\x2a\x21\x59\xdf\x97\x4e\x60\x33\xb6\x23\x1c\x69\x0a\x88\x33\xe9\xa7\xcc\x9a\x4e\x54\xe5\x51\xf9\xf7\x3a\xcf\x9b\x7b\xb9\xca\xf4\x83\x77\x0c\xc7\xa4\x49\xca\x46\x6c\x12\xc1\x46\x94\x5c\x6e\xf5\x16\x2b\xa7\x92\xa5\x9e\x02\x2e\x0b\x32\xac\x9f\x2c\x86\x1d\xc9\x6d\x61\x65\x8b\xc7\xcd\xdd\x9e\x5e\xda\xf6\x75\x3d\x8b\xbc\x31\x4b\x08\x79\xf9\xdf\xad\x88\x45\xee\x79\x89\xe9\xe7\xd8\xe2\xca\x49\x75\x59\xe9\xdb\xc7\x14\x89\x43\x9f\x4d\x34\xe1\xeb\xc2\x3f\x45\xcb\x63\xf1\x44\x91\x7c\xec\xe8\x7e\xf1\x83\x62\x7f\xe4\x30\xb9\xb7\xaa\x4e\x5d\x23\x52\xf3\x19\x00\x00\xff\xff\xd5\xba\xac\xcc\xce\x01\x00\x00"),
		},
		"/playlist.js": &vfsgen۰CompressedFileInfo{
			name:             "playlist.js",
			modTime:          time.Date(2018, 8, 9, 6, 47, 45, 539959864, time.UTC),
			uncompressedSize: 824,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4d\x6f\x9d\x30\x10\x3c\xc3\xaf\xd8\xaa\x07\x1b\xe9\xc9\xb9\x17\x51\xa9\x1f\x91\xda\x2a\x4d\x0f\x89\x7a\xa9\x7a\x70\xcc\x02\x56\x8c\x97\x7a\x97\x17\x45\x4f\xfc\xf7\xca\xc0\x7b\x89\x7a\xea\xcd\x1e\x76\x66\x98\x59\x3b\x8a\x2c\x30\x05\xfb\x1c\x3c\x0b\x34\xd0\x92\x9b\x47\x8c\x62\xfe\xcc\x98\x9e\xef\x30\xa0\x13\x4a\x5a\x99\xf3\x8c\xaa\xea\xb2\x3c\x5f\x8c\x6d\xdb\xeb\x23\x46\xb9\xf1\x2c\x18\x31\x69\xe5\x82\x77\x8f\xea\x00\x08\xcd\x7b\x38\x95\x85\xef\x40\xbf\xd1\x68\xc4\xa6\x1e\x05\x7c\x64\xb1\xd1\x21\x75\xf0\xe5\xfe\xfb\xcd\x87\xe8\x06\x4a\xd7\x01\xb3\x67\x55\x65\x42\x91\x50\xe6\x14\xeb\xb2\x58\xca\xb2\x40\x33\x25\xcc\x0e\x9f\xb1\xb3\x73\x10\x5d\xd5\x65\xd1\xa1\xb8\xe1\xa2\x69\x86\x84\xdd\x01\x4e\x03\xda\x16\x13\x2f\x95\x91\x01\xa3\x5e\x87\xee\x07\x8c\x07\x58\x8f\x9f\xac\xb8\xa1\xaa\xcb\xe5\x00\x9d\x0d\x8c\x39\xc7\x16\xdf\x0b\x8e\x0c\xcd\xa5\x06\xd3\xa3\xec\xbf\xc4\x1f\x9f\xef\x6d\x7f\x6b\x47\xd4\x2a\x78\xf5\xc2\xc1\x4c\x88\xf8\x04\x6b\xfc\x3b\x9a\x93\x43\xad\xae\xce\x12\x57\xf3\xd4\x5a\x41\x5e\x19\xc8\x86\xe2\x88\xcc\xb6\x47\x68\x60\xe4\x7e\xef\x66\x93\x3a\x4d\xc4\x0b\x34\xf0\xed\xee\xc7\xad\x99\x6c\x62\xd4\x23\xf7\xa6\xb5\x62\x33\x7b\x9f\xa2\xd0\xfe\xcf\x7a\xc0\x58\x27\xfe\x88\xd9\x78\xed\x9e\x42\xbb\xd5\x4a\xa1\x35\x3e\x6b\x28\x55\xef\x57\x17\x2c\x73\x5e\x9d\x49\x38\xd2\x11\xb5\x7a\x45\x5e\x2e\xd6\xb9\x1f\x68\xb6\x9a\x7e\x4d\xc4\xbf\x77\xe9\x0c\x6c\xda\xf9\xb4\x8b\xbb\x39\x25\x8c\xb2\x7a\xac\xf0\x8b\x89\x6d\xdb\xd7\x0e\x79\xa0\x03\x1d\xc8\x59\xf1\x14\xcd\x60\x79\x80\xa6\x69\x40\xbd\x3d\x8b\x6c\xea\x9b\x0e\xbb\x44\x21\x7c\x8d\x42\x3f\x3d\x3e\xe9\xf5\x43\xf1\x10\xc8\x3d\xbe\x03\xc5\x62\x93\xa8\xc3\x8a\xf9\x18\x7c\xc4\x7f\xc0\x07\x1c\xec\xd1\x53\xca\xf0\x48\x24\xc3\x86\x2f\x39\x69\xb1\xe4\xb4\xcb\x79\x53\x98\x12\x25\x68\x2e\x2f\x38\x97\x40\x01\xcd\x8a\xeb\xfc\x6e\x96\xfa\x6f\x00\x00\x00\xff\xff\x1e\xba\x29\x35\x38\x03\x00\x00"),
		},
		"/style.css": &vfsgen۰CompressedFileInfo{
			name:             "style.css",
			modTime:          time.Date(2018, 8, 9, 6, 47, 22, 500856313, time.UTC),
			uncompressedSize: 511,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\x41\x6e\xc3\x20\x10\x45\xd7\xe1\x14\x23\x75\x1b\x2c\x3b\x75\xa3\x0a\xab\x27\xa9\xba\x98\xc0\x14\xa3\x10\x40\x78\xd2\xd8\xa9\x72\xf7\x0a\x3b\xc9\xa2\x8a\xb2\x83\xd1\x7b\xf3\xf9\x62\x17\xcd\x04\xbf\x62\x75\xc0\x51\x9e\x9c\xe1\x5e\xc1\xf6\xad\x4e\x63\x27\xca\x2c\x5b\x17\x14\xb4\x75\x1a\x01\x8f\x1c\x3b\xb1\x4a\x68\x8c\x0b\x56\x41\x0d\xcd\x15\xfb\x8e\x81\xe5\xe0\xce\xa4\xa0\x79\x2f\xa3\x95\x77\x81\x64\x4f\xce\xf6\xac\xa0\xa9\xb6\x85\xd2\xd1\xc7\xac\xe0\xa5\x6d\xdb\x4e\x5c\x84\xe8\x9b\x35\xf4\x9b\x35\xf4\xaf\x25\xfe\x9f\xb1\x99\x91\x2a\xa1\x25\x99\x3c\x4e\xde\x0d\x0c\x15\x6a\x76\x3f\x54\xf0\x39\xf2\x74\xc5\x77\xd1\x9b\x47\xbc\x21\x46\xe7\x07\x48\x4b\xbf\xa5\x4b\x7d\x7f\xf1\x4d\x0f\x31\x1f\xd0\x3f\x5a\xe0\x1d\xe0\x1a\x96\xa1\x8e\x81\x73\xf4\x03\x54\xf7\x13\x96\xbd\x4b\xad\x7b\xab\xe7\x30\xd3\xc8\xd2\x90\x8e\x19\xd9\xc5\x50\xb2\x03\x3d\xf7\x6e\x16\x7a\x67\x83\x02\x4d\x81\x29\xcf\x8a\x0b\xe9\xc8\x9f\x3c\x25\xfa\xc8\x18\x2c\x7d\x29\x25\x0f\xf1\x2c\xe7\x8b\xe4\x8c\x7a\x5f\xec\x1d\xea\xbd\xcd\xf1\x18\x8c\xbc\x7e\x81\x2f\xbd\x6d\xa6\xa9\x13\x97\xbf\x00\x00\x00\xff\xff\x2d\x57\x62\x2a\xff\x01\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/controls.js"].(os.FileInfo),
		fs["/fetch-helpers.js"].(os.FileInfo),
		fs["/playlist.js"].(os.FileInfo),
		fs["/style.css"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
