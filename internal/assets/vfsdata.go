// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// FileSystem contains project assets.
var FileSystem = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 8, 9, 8, 7, 35, 833047672, time.UTC),
		},
		"/controls.js": &vfsgen۰CompressedFileInfo{
			name:             "controls.js",
			modTime:          time.Date(2018, 8, 9, 8, 7, 35, 833047672, time.UTC),
			uncompressedSize: 772,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x4f\x8b\xd4\x40\x10\xc5\xcf\xc9\xa7\x28\x61\x96\x74\xe3\xd8\x19\x3c\x78\x30\x44\x90\x71\x41\x65\x55\x70\xd6\xfb\x34\x9d\xca\x1f\xec\x54\xc7\xee\xca\xe8\x12\xfb\xbb\x4b\x92\x9d\x71\x05\x17\xf6\x16\x2a\xd5\xaf\xde\xef\x55\x55\xce\x8c\x3d\x12\xab\x1f\x23\xfa\xbb\x03\x5a\x34\xec\xbc\xc8\x94\x71\xc4\xde\xd9\x90\x49\xa5\xab\xea\xfa\x84\xc4\x37\x5d\x60\x24\xf4\x22\x33\xb6\x33\xdf\xb3\x2d\x20\x94\x6f\x60\x4a\x93\xae\x06\xf1\x4c\xa0\x62\xed\x1b\x64\xe8\x28\xb0\x26\x83\xae\x86\xf7\xb7\x9f\x6e\xde\x92\x69\x9d\xbf\xb6\x38\x0f\x92\x72\x7e\x90\x78\xe4\xd1\x53\x91\x26\x31\x4d\x13\x54\x83\xc7\x79\xc2\x3b\xac\xf5\x68\x59\xc8\x22\x4d\x6a\x64\xd3\x5e\x34\x55\xeb\xb1\xde\xc2\xd4\xa2\xae\xd0\x87\x28\x15\xb7\x48\x62\x69\xba\x6d\x91\xb6\xb0\x7c\xee\x35\x9b\x56\x16\x69\xdc\x42\xad\x6d\x40\x59\xa4\xe9\xa3\x88\x27\x67\xc7\x1e\xff\x0b\xd8\xd1\x30\xf2\x03\xc0\x8b\x0d\xee\xd8\x22\x94\x70\xdc\x4c\x97\xda\x49\xdb\x11\xe3\xd5\xb1\x48\xcf\xae\x8f\xf9\x39\xbe\x7c\x1d\x92\x6f\x26\x24\xe3\x2a\xfc\xf6\xf5\xc3\xde\xf5\x83\x23\x24\x16\xff\x2a\xc8\x78\x7c\x08\x98\x26\xc9\xd3\x19\x8d\xa3\xc0\x10\x1c\x35\x50\xc2\xa3\xc0\xf3\xff\xec\x6f\x3b\x06\x28\x81\xf0\x27\x2c\xf0\x07\x37\x7a\x83\x22\xcb\x07\xab\xef\x6c\x17\x38\x1f\x87\x4a\x33\x86\xe5\x05\x06\xe5\xa8\xc7\x10\x74\x33\xe3\xf7\xa1\xb9\x4f\x66\x95\x9a\x96\x5c\xb6\x60\x91\x1a\x6e\x23\x94\xf0\xf1\xf0\xe5\xb3\x1a\xb4\x0f\x28\xfa\xd0\xa8\x4a\xb3\x9e\xb7\x3a\x5f\xca\xd2\xbb\x9e\xc1\xec\x48\x31\xfe\xe2\xbd\x23\x46\xe2\x35\xd9\xa5\x21\x82\xd8\x4c\x62\x15\xcc\x5f\xed\xe4\xef\x5d\x7c\xbd\x99\x44\xb6\xcb\x9e\x8b\xfb\xf2\xd5\x52\x96\x52\x05\xdb\x19\x14\x2f\x5e\xca\x28\x8f\xcb\x4d\xc5\xb3\x65\xf4\xde\x79\x28\x2f\x8b\x9c\xed\x3a\x8b\x6a\xa9\x8b\x39\xbb\x58\xfc\x09\x00\x00\xff\xff\xcd\xa0\x00\xac\x04\x03\x00\x00"),
		},
		"/fetch-helpers.js": &vfsgen۰CompressedFileInfo{
			name:             "fetch-helpers.js",
			modTime:          time.Date(2018, 8, 9, 6, 43, 15, 65744137, time.UTC),
			uncompressedSize: 462,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xc1\x6a\xeb\x30\x10\x45\xd7\xd1\x57\xcc\xe2\x81\x6c\x08\x7a\xfb\x18\x15\x42\x28\x74\x59\x88\x3f\xc0\x46\xbe\xa9\x4d\x15\xc9\x91\xc6\x90\x12\xf4\xef\x45\x72\x09\x2d\x34\x5d\x8e\xb8\x73\xcf\x19\x19\xef\x22\xd3\x88\x7e\x40\x88\xa4\xe9\x26\x36\x7b\x63\x30\xf3\x8e\x24\xe3\xca\xff\x67\xdb\x4f\x4e\x6e\x45\x6a\x84\x58\xc3\x08\xc1\x87\x67\x8b\x33\x69\x1a\xbc\x59\xce\x70\xac\x2e\x0b\xc2\xc7\x11\x16\x86\x7d\xa8\xa4\x2a\x21\x59\xdf\x97\x4e\x60\x33\xb6\x23\x1c\x69\x0a\x88\x33\xe9\xa7\xcc\x9a\x4e\x54\xe5\x51\xf9\xf7\x3a\xcf\x9b\x7b\xb9\xca\xf4\x83\x77\x0c\xc7\xa4\x49\xca\x46\x6c\x12\xc1\x46\x94\x5c\x6e\xf5\x16\x2b\xa7\x92\xa5\x9e\x02\x2e\x0b\x32\xac\x9f\x2c\x86\x1d\xc9\x6d\x61\x65\x8b\xc7\xcd\xdd\x9e\x5e\xda\xf6\x75\x3d\x8b\xbc\x31\x4b\x08\x79\xf9\xdf\xad\x88\x45\xee\x79\x89\xe9\xe7\xd8\xe2\xca\x49\x75\x59\xe9\xdb\xc7\x14\x89\x43\x9f\x4d\x34\xe1\xeb\xc2\x3f\x45\xcb\x63\xf1\x44\x91\x7c\xec\xe8\x7e\xf1\x83\x62\x7f\xe4\x30\xb9\xb7\xaa\x4e\x5d\x23\x52\xf3\x19\x00\x00\xff\xff\xd5\xba\xac\xcc\xce\x01\x00\x00"),
		},
		"/playlist.js": &vfsgen۰CompressedFileInfo{
			name:             "playlist.js",
			modTime:          time.Date(2018, 8, 9, 6, 51, 9, 334875869, time.UTC),
			uncompressedSize: 885,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4d\x6f\x9c\x30\x10\x3d\xc3\xaf\x98\xaa\x07\x1b\x69\xe5\xdc\x8b\xa8\xd4\x8f\x48\x6d\x95\xa6\x87\x5d\xf5\x52\xf5\xe0\x98\x01\xac\x18\x0f\xb5\x87\x8d\xa2\x84\xff\x5e\xd9\xc0\x26\xea\xa9\x37\xf3\x98\xf7\xde\xcc\x9b\x31\xe4\x23\xc3\xe4\xf4\xa3\xb3\x91\xa1\x81\x96\xcc\x3c\xa2\x67\xf5\x67\xc6\xf0\x78\x44\x87\x86\x29\x48\xa1\xf6\x1a\x51\xd5\x65\xb9\x7f\x28\xdd\xb6\xd7\x67\xf4\x7c\x63\x23\xa3\xc7\x20\x85\x71\xd6\xdc\x8b\x03\x20\x34\xef\xe1\xa9\x2c\x6c\x07\xf2\x8d\x44\xc5\x3a\xf4\xc8\x60\x7d\x64\xed\x0d\x52\x07\x5f\x4e\xdf\x6f\x3e\x78\x33\x50\xb8\x76\x98\x3c\xab\x2a\x11\x8a\x80\x3c\x07\x5f\x97\xc5\x52\x96\x05\xaa\x29\x60\x72\xf8\x8c\x9d\x9e\x1d\xcb\xaa\x2e\x8b\x0e\xd9\x0c\x17\x4d\x35\x04\xec\x0e\xf0\x34\xa0\x6e\x31\xc4\xa5\x52\x3c\xa0\x97\xb9\xe8\x34\xa0\x3f\x40\x7e\x7e\xd2\x6c\x86\xaa\x2e\x97\x03\x74\xda\x45\x4c\x73\xac\xe3\x5b\xc6\x31\x42\x73\x89\x41\xf5\xc8\x5b\x4b\xf1\xe3\xe3\x49\xf7\xb7\x7a\x44\x29\x9c\x15\x2f\x1c\x4c\x04\x8f\x0f\x90\xc7\x3f\xd2\x1c\x0c\x4a\x71\xb5\x4b\x5c\xcd\x53\xab\x19\x63\x66\x60\x54\xe4\x47\x8c\x51\xf7\x08\x0d\x8c\xb1\xdf\xb2\x59\xa5\x9e\x26\x8a\x0b\x34\xf0\xed\xf8\xe3\x56\x4d\x3a\x44\x94\x63\xec\x55\xab\x59\x27\xf6\x56\x45\xae\xfd\x9f\xf5\x80\xd2\x86\xed\x19\x93\x71\xce\x9e\x5c\xbb\xc6\x4a\xae\x55\x36\x69\x08\x51\x6f\x9f\xc6\xe9\x18\xd3\xea\x54\xc0\x91\xce\x28\xc5\x2b\xf2\x72\xb1\x4e\xf9\x40\xb3\xc6\xf4\x6b\xa2\xf8\x7b\x93\x4e\xc0\xaa\x9d\x5e\x9b\xb8\x99\x43\x40\xcf\xd9\x23\xc3\x2f\x26\xba\x6d\x5f\x3b\xa4\x82\x0e\xa4\x23\xa3\xd9\x92\x57\x83\x8e\x03\x34\x4d\x03\xe2\xed\x2e\xb2\xaa\x6f\x6d\x44\x13\xc8\xb9\x13\x6d\xad\xe4\xc3\xb0\x34\xc7\x6d\x55\x47\x7b\xe7\xac\xef\xe1\xf9\x39\xff\x4e\xfe\xc5\x4e\x51\xeb\xe3\xab\x67\xfa\x69\xf1\x41\x66\xd5\xe2\xce\x91\xb9\x7f\x07\x22\xb2\x0e\x2c\x0e\x19\xb3\xde\x59\x8f\xff\x80\x77\x38\xe8\xb3\xa5\x90\xe0\x91\x88\x87\x15\x5f\x52\x4c\xc5\x92\xa2\x5a\xf6\x35\x63\x08\x14\xa0\xb9\x9c\x7f\x6a\x9d\x1c\xaa\x8c\xcb\x74\x74\x4b\xfd\x37\x00\x00\xff\xff\xcb\x17\x88\x64\x75\x03\x00\x00"),
		},
		"/style.css": &vfsgen۰CompressedFileInfo{
			name:             "style.css",
			modTime:          time.Date(2018, 8, 9, 8, 7, 28, 869017675, time.UTC),
			uncompressedSize: 553,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\xc1\x6e\xea\x30\x10\x45\xd7\xf8\x2b\x46\x7a\x5b\x1c\x25\xbc\x14\x55\x8e\xfa\x25\x55\x17\x83\xed\x3a\x16\xc6\x63\x39\x43\x49\xa8\xf8\xf7\xca\x09\x50\xa9\x42\xec\x92\xd1\xb9\x73\x7d\xec\x1d\x99\x09\xbe\xc5\xea\x80\xa3\x3c\x79\xc3\xbd\x82\xed\x4b\x9d\xc6\x4e\x94\x59\x76\x3e\x2a\x68\xeb\x34\x02\x1e\x99\x3a\xb1\x4a\x68\x8c\x8f\x4e\x41\x0d\xcd\x15\xfb\xa4\xc8\x72\xf0\x67\xab\xa0\x79\x2d\xa3\x55\xf0\xd1\xca\xde\x7a\xd7\xb3\x82\xa6\xda\x16\x4a\x53\xa0\xac\xe0\x5f\xdb\xb6\x9d\xb8\x08\xd1\x37\x6b\xe8\x37\x6b\xe8\xff\x97\xfa\x3f\x89\xcd\x8c\x54\x09\x9d\x95\x29\xe0\x14\xfc\xc0\x50\xa1\x66\xff\x65\x0b\x3e\x57\x9e\xae\xf8\x8e\x82\x79\xc4\x1b\xcb\xe8\xc3\x00\x69\xf1\x5b\x5c\xea\xfb\x89\x6f\xf1\x48\xf9\x80\xe1\xd1\x82\xe0\x01\xd7\xb0\x0c\x35\x45\xce\x14\x06\xa8\xee\x5f\x58\xf6\x2e\x5a\x77\xab\xe7\x30\xdb\x91\xa5\xb1\x9a\x32\xb2\xa7\x58\xba\xa3\x7d\x9e\xbb\xa5\x30\x78\x17\x15\x68\x1b\xd9\xe6\x87\x91\x81\xa2\xfb\x35\x95\x4c\x69\xb6\xbd\x08\xe1\x63\x3a\xf2\x3b\x4f\xc9\xbe\x65\x8c\xce\x7e\x28\x25\x0f\x74\x96\xf3\x8f\xe4\x8c\x7a\x5f\x82\x3b\xd4\x7b\x97\xe9\x18\x8d\xbc\x3e\x56\x28\x37\xe4\xb2\x9d\x3a\x71\xf9\x09\x00\x00\xff\xff\x03\x4c\x05\xde\x29\x02\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/controls.js"].(os.FileInfo),
		fs["/fetch-helpers.js"].(os.FileInfo),
		fs["/playlist.js"].(os.FileInfo),
		fs["/style.css"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
