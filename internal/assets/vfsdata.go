// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// FileSystem contains project assets.
var FileSystem = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 8, 8, 14, 51, 39, 351058279, time.UTC),
		},
		"/controls.js": &vfsgen۰CompressedFileInfo{
			name:             "controls.js",
			modTime:          time.Date(2018, 8, 9, 1, 19, 54, 634758003, time.UTC),
			uncompressedSize: 481,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\x4f\x4b\xc4\x30\x10\x47\xcf\xcd\xa7\x88\xb0\xd2\x06\x4a\x7a\xb7\xac\xb0\xe8\x82\xc2\x7a\xf1\xcf\xbd\x21\xfd\xd5\x16\xb3\x93\x3a\x9d\x2e\x4a\xe9\x77\x97\xa2\xbb\x28\x88\xe0\x35\x61\xde\x9b\x37\x3e\xd2\x20\xba\x85\xab\xc1\x83\x5e\xeb\x49\x25\x1b\xef\xd1\xcb\x85\x4e\x05\x6f\x52\xf4\xc1\x75\x94\xe6\x6a\x2e\x95\xaa\xa3\x1f\xf7\x20\xb1\xaf\x23\xf8\xfd\x01\x01\x5e\x22\x67\xa9\xf5\x91\x84\x63\x18\x52\x63\x5d\x5d\x6f\x0f\x20\xd9\x75\x83\x80\xc0\x59\xea\x43\xe7\x5f\xd2\x5c\x43\xaf\x2f\x17\x7e\xd7\xe8\xec\x2c\x83\x15\xc7\xcf\x10\xdd\xd1\x20\x8e\x3c\x62\xa3\x6f\x1e\xef\x76\x1b\xf2\x6d\xe4\x6d\xc0\x22\x32\x66\x19\x48\x18\x32\x32\x95\x2a\x99\x95\x4a\x60\x7b\xc6\x62\xb8\x46\xe3\xc6\x20\x99\x29\x55\xd2\x40\x7c\x7b\x62\xda\x96\xd1\xe4\x7a\xfa\xca\x9a\x8d\xf5\x6e\xf9\x5f\x62\x63\x80\x05\x73\x64\x53\xaa\x39\xd7\x8d\x0b\x03\xcc\x5f\x6d\x87\x18\xc6\x3d\x7e\x2d\xeb\xa8\x1f\xe5\x5b\xd9\xc9\x2f\x9d\x04\xe8\xb5\xae\x56\xd3\xe9\xed\xe0\xc2\x88\xf9\xbc\x2a\xd5\x71\xdd\xaa\x38\xde\xad\xf8\x94\x14\xab\x09\xe4\x63\x8d\xa7\xfb\xdb\xab\xb8\xef\x23\x81\x24\xfb\x49\x30\x73\xf5\xaf\xb2\x8f\x00\x00\x00\xff\xff\xe6\x3c\xac\xaa\xe1\x01\x00\x00"),
		},
		"/style.css": &vfsgen۰CompressedFileInfo{
			name:             "style.css",
			modTime:          time.Date(2018, 8, 9, 1, 14, 31, 747522133, time.UTC),
			uncompressedSize: 446,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xc1\x6e\x02\x21\x10\x86\xcf\xf2\x14\x93\xf4\x2a\x1b\xd7\x6e\x4d\xc3\xa6\x4f\xd2\xf4\x80\x30\x65\x89\x38\x43\x70\xac\xbb\x36\xbe\x7b\xc3\x6a\x3d\x34\x8d\x37\xf8\xf3\x7d\xcc\xcf\x6c\xd9\x4f\xf0\xad\x16\x7b\x3b\xea\x53\xf4\x32\x18\xd8\xbc\xac\xf2\xd8\xab\x9a\x95\x10\xc9\x40\xb7\xca\x23\xd8\xa3\x70\xaf\x16\xd9\x7a\x1f\x29\x18\x58\x41\x7b\xc3\x3e\x99\x44\x1f\xe2\x19\x0d\xb4\xaf\x35\x5a\xa4\x48\xa8\x07\x8c\x61\x10\x03\x6d\xb3\xa9\x94\xe3\xc4\xc5\xc0\x53\xd7\x75\xbd\xba\x28\x35\xb4\x4b\x18\xd6\x4b\x18\x9e\xeb\xf8\x3f\xc6\x7a\x46\x9a\x6c\x03\xea\x9c\xec\x94\xe2\x41\xa0\xb1\x4e\xe2\x17\x56\x7c\x1e\x79\xba\xe1\x5b\x4e\xfe\x3f\x3e\x45\xb0\x4b\xb8\x86\x8e\x49\x0a\xa7\x03\x34\xf7\x93\xad\x0f\x5d\x5b\xdd\x4b\x3d\x86\x05\x47\xd1\x1e\x1d\x17\x2b\x91\xc9\x00\x31\xe1\x63\xef\xd7\xb2\x29\x06\x32\xe0\x90\x04\xcb\xac\x44\xca\x47\x79\x97\x29\xe3\x5b\xb1\x14\xf0\xc3\x18\xbd\xe7\xb3\x9e\x2f\x5a\x8a\x75\xbb\x6a\x6f\xad\xdb\x85\xc2\x47\xf2\xfa\xb6\xc1\x54\x7f\x1d\x0a\x4e\xbd\xba\xfc\x04\x00\x00\xff\xff\xe0\x1e\x73\x6d\xbe\x01\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/controls.js"].(os.FileInfo),
		fs["/style.css"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
