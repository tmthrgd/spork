// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// FileSystem contains project assets.
var FileSystem = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 8, 8, 14, 51, 39, 351058279, time.UTC),
		},
		"/controls.js": &vfsgen۰CompressedFileInfo{
			name:             "controls.js",
			modTime:          time.Date(2018, 8, 8, 14, 53, 28, 933559475, time.UTC),
			uncompressedSize: 205,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8d\x41\x4b\xc4\x30\x10\x46\xcf\xdb\x5f\x91\xc3\x4a\x12\x58\xd2\x1f\x50\xd6\x8b\x78\x10\x3c\x29\xde\x13\x92\x6f\xb5\x90\xce\xd4\xc9\xa4\x20\xa5\xff\x5d\x44\x10\xbc\x3e\x78\xef\x15\xce\x7d\x01\x69\xf8\xec\x90\xaf\x57\x54\x64\x65\x71\x36\x6c\x5c\xfb\x02\xeb\x43\x2a\xe5\x71\x03\xe9\xf3\xdc\x14\x04\x71\x76\xa6\xb5\xab\xbd\x18\x98\xeb\xbd\xd9\x87\x13\x82\x26\x79\x87\x06\x9d\xb5\xc2\x5c\x4d\x3c\xef\x7f\x6c\x4b\xb5\xe3\xb8\x8b\xd3\x30\x9c\x6e\xd0\xfc\xe1\xe2\x98\x99\x54\xb8\xb6\xf1\x77\x32\x9e\x77\x50\xe6\x82\xb7\x97\xa7\x07\x5e\x56\x26\x90\xba\xff\x05\x7f\x44\x1f\x72\xfa\xf1\x33\x53\xe3\x8a\x00\x11\x16\x3f\x0d\xc7\xc5\xdc\x52\x6d\xf0\xd3\x77\x00\x00\x00\xff\xff\x66\xb0\x5b\xb0\xcd\x00\x00\x00"),
		},
		"/style.css": &vfsgen۰CompressedFileInfo{
			name:             "style.css",
			modTime:          time.Date(2018, 8, 8, 15, 2, 44, 77124380, time.UTC),
			uncompressedSize: 395,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x4d\x6e\xc3\x20\x10\x85\xd7\xe1\x14\x23\x75\x1b\xac\x38\x75\xa3\x0a\xab\x27\xa9\xba\x98\x00\x05\x14\xc2\x20\x3c\x6e\xec\x54\xb9\x7b\x85\x63\x65\x51\x55\xdd\xc1\xd3\xf7\x7e\xe0\x48\x66\x86\x6f\xb1\x39\xe3\x24\x2f\xc1\xb0\x57\x70\x78\xd9\xe5\xa9\x17\x55\x2b\x2e\x24\x05\xdd\x2e\x4f\x80\x23\x53\x2f\x36\x19\x8d\x09\xc9\x29\xd8\x41\xbb\x62\x9f\x94\x58\x0e\xe1\x6a\x15\xb4\xaf\x55\xda\xc4\x90\xac\xf4\x36\x38\xcf\x0a\xda\xe6\x50\x29\x4d\x91\x8a\x82\xa7\xae\xeb\x7a\x71\x13\xc2\xb7\x5b\xf0\xfb\x2d\xf8\xe7\x5a\xff\xcb\xb1\x5f\x90\x26\xa3\xb3\x32\x47\x9c\x63\x18\x18\x1a\xd4\x1c\xbe\x6c\xc5\x97\xca\xcb\x8a\x1f\x29\x9a\xbf\xf8\x18\x00\xb7\x70\x17\x35\x25\x2e\x14\x07\x68\x1e\x27\xac\x41\xf7\x55\x8f\x51\xff\xc3\x6c\x27\x96\xc6\x6a\x2a\xc8\x81\x92\x82\x44\xc9\x2e\xbe\x90\xf2\xc8\xef\x3c\x67\xfb\x56\x30\x39\xfb\xa1\x94\x3c\xd3\x55\x2e\x17\xc9\x05\xf5\xa9\x06\x1c\x51\x9f\x5c\xa1\x31\x19\xb9\x7e\x47\xac\x4f\x70\xc5\xce\xbd\xb8\xfd\x04\x00\x00\xff\xff\x19\x83\x50\x6d\x8b\x01\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/controls.js"].(os.FileInfo),
		fs["/style.css"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
