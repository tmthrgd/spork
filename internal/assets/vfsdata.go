// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// FileSystem contains project assets.
var FileSystem = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 8, 29, 2, 38, 16, 328738479, time.UTC),
		},
		"/controls.js": &vfsgen۰CompressedFileInfo{
			name:             "controls.js",
			modTime:          time.Date(2018, 8, 29, 2, 38, 16, 328738479, time.UTC),
			uncompressedSize: 1024,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x4f\x6f\xd4\x3e\x10\x3d\x27\x9f\x62\x7e\xd2\xb6\xb6\xf5\x5b\xbc\x2b\x0e\x3d\xb0\x0a\x12\x2a\x95\x00\x15\x90\x68\xb9\xaf\xe5\xcc\x26\xd1\x3a\x76\xb0\x27\x0b\x55\xc8\x77\x47\x76\xb2\x69\x91\xd8\x4b\x62\xcd\x9f\x37\xef\xcd\xbc\xd2\xe9\xbe\x45\x4b\xf2\x47\x8f\xfe\xe9\x01\x0d\x6a\x72\x9e\x33\xa9\x9d\x25\xef\x4c\x60\x42\xaa\xb2\xbc\x3b\xa1\xa5\xfb\x26\x10\x5a\xf4\x9c\x69\xd3\xe8\x23\x5b\x03\x42\xf1\x16\x86\x3c\x6b\x0e\xc0\xff\xe3\x28\x49\xf9\x0a\x09\x1a\x1b\x48\x59\x8d\xee\x00\x1f\x1e\x3f\xdf\xbf\xb3\xba\x76\xfe\xce\x60\x1c\x24\x44\x6c\xc8\x3c\x52\xef\xed\x2e\xcf\xc6\x3c\xcf\x0c\x12\x50\x8d\x16\x0a\x38\x20\xe9\xfa\xb1\xc6\x98\x8a\xa8\x8c\x5c\x55\x19\x64\xd0\x58\x38\xe3\xcb\x52\x91\x0a\x48\x13\xd2\xdc\xe8\x31\x74\x33\x9b\x2c\x5b\x50\x78\x0c\x8b\x5d\x1e\x83\xd3\xc8\x54\x28\xdd\x11\xae\xaf\xa7\x27\xe1\x2f\xe2\x42\x46\x18\xee\x8e\x0b\x44\xb6\x4c\xd3\x46\x85\x10\xb5\xcb\x89\x0b\x67\x4a\x53\x73\x42\xb6\x06\x77\x94\xe4\x9b\x96\x0b\x28\x8a\x02\x18\xf9\x1e\x99\xd8\xc5\xf6\x31\xfd\xc6\x59\x20\xca\xce\x63\x5c\xe1\x7b\x3c\xa8\xde\x10\x8f\xd9\x44\x72\x59\x9a\xac\x3d\x1e\xd6\x30\xd4\xa8\x4a\xf4\x61\x9c\x19\xc5\x8f\x90\x5a\xc5\xd2\xd4\x70\x1b\x9f\x62\x97\x8f\x6b\x38\x28\x13\x30\x8a\xbb\x78\xc4\x93\x33\x7d\x8b\xff\x3c\x61\x63\xbb\x9e\x5e\x9c\x70\xe1\x41\x0d\x19\x84\x02\xf6\xab\x61\x89\x9d\x94\xe9\x71\xbc\xda\xc7\x45\x4e\xb4\xf7\x9b\xb3\x41\x36\xd3\x90\xcd\x6a\x40\xab\x5d\x89\xdf\xbf\x7d\xbc\x75\x6d\xe7\x2c\x5a\xe2\x7f\x23\x88\x71\xff\x52\x61\x9e\x65\x93\xc8\xe5\x5c\x6b\xb8\xa8\x51\x3b\x1b\x08\x82\xb3\x15\x14\x70\x51\x70\xcc\xb3\xe7\x72\x0c\x50\x80\xc5\x9f\x90\xc4\x3f\xb8\xde\x6b\xe4\x6c\xd3\x19\xf5\x64\x9a\x40\x9b\xbe\x2b\x15\x61\x48\x1d\x18\xa4\xb3\xae\x4b\x66\xd2\x06\x95\xbf\xf3\xde\xf9\x73\xa2\xc5\x10\x54\x15\xf7\xd2\x86\x6a\x5e\xd9\x73\x15\x4f\x16\x9b\x66\x0e\x69\x81\x6b\x30\x68\x2b\xaa\x47\x28\xe0\xd3\xc3\xd7\x2f\xb2\x53\x3e\x20\x6f\x43\x95\xdc\x2b\x66\x7b\xa7\xda\xc9\xc7\x91\x7a\x32\xe3\xad\xb3\x84\x96\xa6\x13\xa4\x82\x11\xf8\x6a\xe0\x13\xe0\xe6\x66\x2b\x7e\x6f\xc7\x37\xab\x81\xb3\x2d\xfb\x7f\x8e\x5e\xdd\x6c\x85\x90\xc1\x34\x1a\xf9\xab\xd7\x62\x14\xfb\xe4\xbc\xf1\x4c\x1f\x23\x4b\x28\x00\x9f\xf7\x30\xc9\xfb\x13\x00\x00\xff\xff\xcc\x75\xeb\x1f\x00\x04\x00\x00"),
		},
		"/fetch-helpers.js": &vfsgen۰CompressedFileInfo{
			name:             "fetch-helpers.js",
			modTime:          time.Date(2018, 8, 29, 2, 27, 45, 891345270, time.UTC),
			uncompressedSize: 678,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x51\x8b\xe2\x30\x14\x85\x9f\xdb\x5f\x71\x1f\x16\xd2\x82\x74\xdf\x2d\x5d\x10\x11\xf6\x71\xc1\xfe\x00\xb3\xe9\x71\x5b\x36\x26\x35\xb9\x19\x14\xe9\x7f\x1f\x92\x3a\xea\x0c\xe3\x30\x8f\x27\xbd\xe7\x9c\x2f\xb7\x51\xd6\x78\xa6\x1e\xb2\x83\xf3\xd4\xd0\x25\xcf\x56\x4a\x61\xe4\x25\x09\xc6\x89\x7f\x8e\x5a\x0e\x46\x2c\xf2\xa9\xce\xf3\x79\x18\xce\x59\xb7\xd1\x38\x50\x43\x9d\x55\xe1\x00\xc3\xd5\x31\xc0\x9d\xb7\xd0\x50\x6c\x5d\x21\xaa\x34\x24\xca\x9b\x49\x69\x48\xb7\x89\x87\xd4\x50\x51\x52\xf3\x2b\x56\xdd\xa2\xaa\xd8\xb5\xb6\x86\x61\x98\x1a\x12\xa2\x7e\x28\xdc\x83\x55\xdf\xf6\x30\xd4\x90\x83\x1f\xaf\xe6\x61\x4f\x45\x94\x95\xfd\x5f\x46\x9d\xdd\x3b\x8a\xb2\xce\xb3\x89\xa0\x3d\xe6\x2f\xd6\x78\xab\x31\x53\x15\x22\x05\x92\xc3\x31\x20\xc6\xcb\x41\xa3\x5b\x92\x58\xa4\xf4\xc8\x9c\x3d\x25\xdb\xad\xe8\x77\xdb\xfe\x99\x97\x40\x56\xa9\xe0\x5c\x34\xff\xb8\x24\x14\xcf\x92\x83\x9f\xde\xcb\x16\x27\x9e\xaa\x5d\x44\xfa\x78\xab\xb5\x8c\x24\x0d\xe1\x7a\xa7\x2f\x41\xd3\x61\xe2\x44\x82\x7c\xce\x68\x3e\xe1\x43\xc5\x76\xcb\x6e\x30\xff\x8a\x72\xda\x3d\xee\x17\x2f\x30\xbc\xb5\xc1\x29\xbc\xfd\xa1\x27\x3c\x9b\xfb\xe4\xb7\x69\x44\xdb\x83\x1e\x8d\xf3\xbe\x6b\x0a\x46\xfe\xd5\x20\xb6\xa4\x07\xcf\x30\xb4\xb7\x8e\x46\x2d\xcf\x51\x52\x18\x3b\xc9\xf0\x55\x7a\x09\xaf\x01\x00\x00\xff\xff\x2f\x80\x70\x28\xa6\x02\x00\x00"),
		},
		"/playlist.js": &vfsgen۰CompressedFileInfo{
			name:             "playlist.js",
			modTime:          time.Date(2018, 8, 29, 2, 26, 31, 400063256, time.UTC),
			uncompressedSize: 915,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4d\x8f\xd3\x30\x10\x3d\x27\xbf\x62\x10\x07\x3b\x52\xe5\xbd\x53\x05\x89\x8f\x4a\x80\x96\xe5\xd0\x8a\x0b\xe2\xe0\x3a\x93\xc4\x5a\xc7\x13\xec\x49\x57\x55\x37\xff\x1d\x39\x1f\x6d\xc5\x89\x9b\x3d\x9e\xf7\xde\xcc\x7b\x36\xe4\x23\x43\xef\xf4\xd9\xd9\xc8\x50\x42\x45\x66\xe8\xd0\xb3\xfa\x33\x60\x38\xef\xd1\xa1\x61\x0a\x52\xa8\xb5\x47\x14\xdb\x3c\x5f\x2f\x4a\x57\xd5\xee\x84\x9e\x1f\x6d\x64\xf4\x18\xa4\x30\xce\x9a\x67\xb1\x01\x84\xf2\x3d\x5c\xf2\xcc\xd6\x20\xdf\x48\x54\xac\x43\x83\x0c\xd6\x47\xd6\xde\x20\xd5\xf0\xe5\xf0\xfd\xf1\x83\x37\x2d\x85\x9d\xc3\xa4\x59\x14\x09\x90\x05\xe4\x21\xf8\x6d\x9e\x8d\x79\x9e\xa1\xea\x03\x26\x85\xcf\x58\xeb\xc1\xb1\x2c\xb6\x79\x56\x23\x9b\xf6\xca\xa9\xda\x80\xf5\x06\x2e\x2d\xea\x0a\x43\x1c\x0b\xc5\x2d\x7a\x39\x35\x1d\x5a\xf4\x1b\x98\x8e\x9f\x34\x9b\xb6\xd8\xe6\xe3\x06\x6a\xed\x22\xa6\x3d\xe6\xf5\x2d\x63\x17\xa1\xbc\xda\xa0\x1a\xe4\x65\xa4\xf8\xf1\x7c\xd0\xcd\x93\xee\x50\x0a\x67\xc5\x0d\x83\x09\xe0\xf1\x05\xa6\xf5\xf7\x34\x04\x83\x52\x3c\xac\x14\x0f\x43\x5f\x69\xc6\x38\x21\x30\x2a\xf2\xd4\xa3\x87\x12\x8c\x43\x1d\x76\x21\x50\x58\x1f\x3a\x8c\x51\x37\x08\x25\x74\xb1\x59\x4c\xbb\x75\xa5\x7d\xf3\x6c\xd6\xbc\xf4\x14\x47\x28\xe1\xdb\xfe\xc7\x93\xea\x75\x88\x28\xbb\xd8\xa8\x4a\xb3\xbe\xeb\x22\x57\xfd\x4f\x8e\xa0\xb4\x61\x7b\xc2\x34\xe1\x14\x12\xb9\x6a\xf6\x9f\x5c\xa5\x6c\xe2\x10\x62\xbb\x5c\x8d\xd3\x31\xa6\x8c\x55\xc0\x8e\x4e\x28\xc5\x1d\x78\xbc\x4a\x27\x23\xa1\x9c\xfd\xfc\xd5\x53\xfc\xbd\x50\xa7\xc2\xcc\x9d\x4e\x0b\xb9\x19\x42\x40\xcf\x93\xc6\x54\xbe\x89\xe8\xaa\xba\x57\x48\x0d\x35\x48\x47\x46\xb3\x25\xaf\x5a\x1d\x5b\x28\xcb\x12\xc4\xdb\x95\x64\x66\x5f\xc6\x88\x26\x90\x73\x07\x5a\x46\x99\x7e\x90\xa5\x21\x2e\x99\xee\xed\xd1\x59\xdf\xc0\xeb\xeb\xf4\x9c\xf4\xb3\x15\xa2\xe6\xc3\x57\xcf\xf4\xd3\xe2\x8b\x9c\x58\xb3\xa3\x23\xf3\xfc\x0e\x44\x64\x1d\x58\x6c\xa6\x9a\xf5\xce\x7a\xfc\xa7\x78\xc4\x56\x9f\x2c\x85\x54\xee\x88\xb8\x9d\xeb\x63\xb2\x29\x1b\x93\x55\xe3\x1a\x3b\xa6\x74\xa1\x04\xbc\xfd\x9f\xf9\x5b\xfc\x0d\x00\x00\xff\xff\xf1\xab\x74\xdb\x93\x03\x00\x00"),
		},
		"/style.css": &vfsgen۰CompressedFileInfo{
			name:             "style.css",
			modTime:          time.Date(2018, 8, 29, 2, 33, 21, 62616217, time.UTC),
			uncompressedSize: 681,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x4d\x8e\xdb\x30\x0c\x85\xd7\xf1\x29\x08\x74\x1b\x05\x76\x9a\x0e\x0a\x05\x3d\x49\xd1\x85\x22\xb1\x32\x31\xb2\x28\xd0\xcc\x8c\x3d\x45\xef\x5e\xc8\xce\x4f\x31\x08\xb2\xb3\x89\xef\x91\x7c\x8f\x3a\x71\x98\xe1\x4f\xb3\x19\xdc\x64\xde\x29\x68\x6f\xe1\xe5\x5b\x5b\xa6\x63\x53\x6b\x12\x29\x5b\x38\xb4\x65\x02\x77\x56\x3e\x36\x9b\xe2\x42\xa0\x1c\x2d\xb4\xd0\x5d\xb0\xdf\x9c\xd5\x8c\xf4\x81\x16\xba\xef\xb5\xb4\x49\x94\xd1\xf4\x48\xb1\x57\x0b\xdd\xee\xa5\x52\x9e\x13\x8b\x85\x2f\x87\xc3\xe1\xd8\xfc\x6d\x9a\xbe\xdb\x42\xbf\xdf\x42\xff\xb5\x8e\xff\xa4\xd8\x2f\xc8\xae\xb8\x88\xa6\x24\x37\x27\x1a\x15\x76\xce\x2b\xbd\x61\xc5\x97\x91\xef\x17\xfc\xc4\x29\x3c\xe2\x03\xaa\xa3\x34\x42\x59\xfd\xad\x5e\xda\xdb\xc6\x57\x79\x66\x19\x5c\x7a\xd4\x20\x11\xb8\x2d\xac\x45\xcf\x59\x85\xd3\x08\xbb\xdb\x97\xab\x7d\x57\x5b\x37\x57\xcf\x61\xc5\x49\x4d\x40\xcf\xe2\x94\x38\xd7\xd9\x19\x9f\xeb\xae\x2a\x97\x28\x66\x0b\x1e\xb3\xa2\x3c\x97\xfc\x97\xd3\x89\x25\xa0\x18\xe5\x62\x61\x5f\x26\x18\x39\x51\x00\xdf\xb3\xe7\xe4\x14\xef\xf7\x5c\x91\xae\x5e\xef\x41\xeb\x91\x73\xbc\x87\xb8\xb2\xed\x42\x52\x2e\x67\xfd\xa9\x73\xc1\x1f\xe2\x72\xc4\x5f\xd6\x9a\x81\x3f\xcc\xf2\x63\x54\x9c\x7f\x5d\xf6\x70\xfe\x35\x0a\x9f\x73\x30\x97\x77\x90\x6a\xf8\x51\x70\x5e\x07\xa2\x08\xcb\x3d\x4f\x18\x30\xd0\x79\x78\x23\x4e\xa8\x82\xf5\xbc\xff\x02\x00\x00\xff\xff\xe9\xf5\x23\x34\xa9\x02\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/controls.js"].(os.FileInfo),
		fs["/fetch-helpers.js"].(os.FileInfo),
		fs["/playlist.js"].(os.FileInfo),
		fs["/style.css"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
